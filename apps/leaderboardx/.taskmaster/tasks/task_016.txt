# Task ID: 16
# Title: Implement Database Schema for Activity-Centric Scoring System
# Status: pending
# Dependencies: None
# Priority: high
# Description: Design and implement database schema changes to support the activity-centric scoring system, including new tables for different score types and activity tagging functionality.
# Details:
This task involves creating and modifying database schema to support the activity-centric scoring system with the following requirements:

1. Create new score tables:
   - `prScores`: Store pull request activity scores with columns for user_id, pr_id, score_value, timestamp, and any relevant metadata
   - `issueScores`: Store issue-related activity scores with columns for user_id, issue_id, score_value, timestamp, and metadata
   - `reviewScores`: Store code review activity scores with columns for user_id, review_id, score_value, timestamp, and metadata
   - Each table should have appropriate primary keys and foreign key constraints
   - Include created_at and updated_at timestamp fields
   - Consider adding an activity_type field for categorization

2. Create the `activityTags` table:
   - Columns: id, activity_id, activity_type, tag_id, created_at, updated_at
   - This table will serve as a polymorphic join table linking different activity types to tags
   - Implement proper indexing for efficient querying

3. Modify existing tables as needed:
   - Update any tables that will interact with the new scoring system
   - Add foreign key relationships where appropriate
   - Ensure backward compatibility with existing data

4. Create database migrations:
   - Write migration scripts for creating new tables
   - Write migration scripts for modifying existing tables
   - Include rollback functionality for all migrations

5. Update database documentation:
   - Document the new schema design
   - Update entity-relationship diagrams
   - Document the relationships between tables

# Test Strategy:
Testing should verify the database schema changes are correctly implemented and functioning as expected:

1. Migration Testing:
   - Verify migrations run successfully in development environment
   - Test rollback functionality to ensure it properly reverts changes
   - Verify migrations run successfully on a copy of production data

2. Schema Validation:
   - Confirm all new tables are created with correct columns, data types, and constraints
   - Verify foreign key relationships are properly established
   - Check that indexes are created correctly for performance

3. Data Integrity Testing:
   - Insert test data into new tables and verify it can be retrieved correctly
   - Test the polymorphic relationships in the activityTags table by linking various activity types to tags
   - Verify cascading updates/deletes work as expected for related records

4. Query Performance Testing:
   - Create and run common queries that will be used by the application
   - Verify query performance is acceptable using EXPLAIN ANALYZE
   - Test with larger datasets to ensure scalability

5. Integration Testing:
   - Test the schema changes with any existing ORM models
   - Verify application code can successfully interact with the new schema
   - Test any API endpoints that will use the new tables
