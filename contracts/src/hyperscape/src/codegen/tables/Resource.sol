// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ResourceType } from "../common.sol";

struct ResourceData {
  ResourceType resourceType;
  int32 x;
  int32 y;
  int32 z;
  bool available;
  uint256 lastHarvestTime;
  uint32 respawnTime;
}

library Resource {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "hyperscape", name: "Resource", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746268797065727363617065000000005265736f757263650000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0032070001040404012004000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, int32, int32, int32, bool, uint256, uint32)
  Schema constant _valueSchema = Schema.wrap(0x0032070000232323601f03000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "resourceId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "resourceType";
    fieldNames[1] = "x";
    fieldNames[2] = "y";
    fieldNames[3] = "z";
    fieldNames[4] = "available";
    fieldNames[5] = "lastHarvestTime";
    fieldNames[6] = "respawnTime";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get resourceType.
   */
  function getResourceType(bytes32 resourceId) internal view returns (ResourceType resourceType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ResourceType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get resourceType.
   */
  function _getResourceType(bytes32 resourceId) internal view returns (ResourceType resourceType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ResourceType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set resourceType.
   */
  function setResourceType(bytes32 resourceId, ResourceType resourceType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(resourceType)), _fieldLayout);
  }

  /**
   * @notice Set resourceType.
   */
  function _setResourceType(bytes32 resourceId, ResourceType resourceType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(resourceType)), _fieldLayout);
  }

  /**
   * @notice Get x.
   */
  function getX(bytes32 resourceId) internal view returns (int32 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get x.
   */
  function _getX(bytes32 resourceId) internal view returns (int32 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set x.
   */
  function setX(bytes32 resourceId, int32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((x)), _fieldLayout);
  }

  /**
   * @notice Set x.
   */
  function _setX(bytes32 resourceId, int32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((x)), _fieldLayout);
  }

  /**
   * @notice Get y.
   */
  function getY(bytes32 resourceId) internal view returns (int32 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get y.
   */
  function _getY(bytes32 resourceId) internal view returns (int32 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set y.
   */
  function setY(bytes32 resourceId, int32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((y)), _fieldLayout);
  }

  /**
   * @notice Set y.
   */
  function _setY(bytes32 resourceId, int32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((y)), _fieldLayout);
  }

  /**
   * @notice Get z.
   */
  function getZ(bytes32 resourceId) internal view returns (int32 z) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get z.
   */
  function _getZ(bytes32 resourceId) internal view returns (int32 z) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set z.
   */
  function setZ(bytes32 resourceId, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((z)), _fieldLayout);
  }

  /**
   * @notice Set z.
   */
  function _setZ(bytes32 resourceId, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((z)), _fieldLayout);
  }

  /**
   * @notice Get available.
   */
  function getAvailable(bytes32 resourceId) internal view returns (bool available) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get available.
   */
  function _getAvailable(bytes32 resourceId) internal view returns (bool available) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set available.
   */
  function setAvailable(bytes32 resourceId, bool available) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((available)), _fieldLayout);
  }

  /**
   * @notice Set available.
   */
  function _setAvailable(bytes32 resourceId, bool available) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((available)), _fieldLayout);
  }

  /**
   * @notice Get lastHarvestTime.
   */
  function getLastHarvestTime(bytes32 resourceId) internal view returns (uint256 lastHarvestTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastHarvestTime.
   */
  function _getLastHarvestTime(bytes32 resourceId) internal view returns (uint256 lastHarvestTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastHarvestTime.
   */
  function setLastHarvestTime(bytes32 resourceId, uint256 lastHarvestTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((lastHarvestTime)), _fieldLayout);
  }

  /**
   * @notice Set lastHarvestTime.
   */
  function _setLastHarvestTime(bytes32 resourceId, uint256 lastHarvestTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((lastHarvestTime)), _fieldLayout);
  }

  /**
   * @notice Get respawnTime.
   */
  function getRespawnTime(bytes32 resourceId) internal view returns (uint32 respawnTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get respawnTime.
   */
  function _getRespawnTime(bytes32 resourceId) internal view returns (uint32 respawnTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set respawnTime.
   */
  function setRespawnTime(bytes32 resourceId, uint32 respawnTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((respawnTime)), _fieldLayout);
  }

  /**
   * @notice Set respawnTime.
   */
  function _setRespawnTime(bytes32 resourceId, uint32 respawnTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((respawnTime)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 resourceId) internal view returns (ResourceData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 resourceId) internal view returns (ResourceData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 resourceId,
    ResourceType resourceType,
    int32 x,
    int32 y,
    int32 z,
    bool available,
    uint256 lastHarvestTime,
    uint32 respawnTime
  ) internal {
    bytes memory _staticData = encodeStatic(resourceType, x, y, z, available, lastHarvestTime, respawnTime);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 resourceId,
    ResourceType resourceType,
    int32 x,
    int32 y,
    int32 z,
    bool available,
    uint256 lastHarvestTime,
    uint32 respawnTime
  ) internal {
    bytes memory _staticData = encodeStatic(resourceType, x, y, z, available, lastHarvestTime, respawnTime);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 resourceId, ResourceData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.resourceType,
      _table.x,
      _table.y,
      _table.z,
      _table.available,
      _table.lastHarvestTime,
      _table.respawnTime
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 resourceId, ResourceData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.resourceType,
      _table.x,
      _table.y,
      _table.z,
      _table.available,
      _table.lastHarvestTime,
      _table.respawnTime
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      ResourceType resourceType,
      int32 x,
      int32 y,
      int32 z,
      bool available,
      uint256 lastHarvestTime,
      uint32 respawnTime
    )
  {
    resourceType = ResourceType(uint8(Bytes.getBytes1(_blob, 0)));

    x = (int32(uint32(Bytes.getBytes4(_blob, 1))));

    y = (int32(uint32(Bytes.getBytes4(_blob, 5))));

    z = (int32(uint32(Bytes.getBytes4(_blob, 9))));

    available = (_toBool(uint8(Bytes.getBytes1(_blob, 13))));

    lastHarvestTime = (uint256(Bytes.getBytes32(_blob, 14)));

    respawnTime = (uint32(Bytes.getBytes4(_blob, 46)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ResourceData memory _table) {
    (
      _table.resourceType,
      _table.x,
      _table.y,
      _table.z,
      _table.available,
      _table.lastHarvestTime,
      _table.respawnTime
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 resourceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 resourceId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    ResourceType resourceType,
    int32 x,
    int32 y,
    int32 z,
    bool available,
    uint256 lastHarvestTime,
    uint32 respawnTime
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(resourceType, x, y, z, available, lastHarvestTime, respawnTime);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    ResourceType resourceType,
    int32 x,
    int32 y,
    int32 z,
    bool available,
    uint256 lastHarvestTime,
    uint32 respawnTime
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(resourceType, x, y, z, available, lastHarvestTime, respawnTime);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 resourceId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = resourceId;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
