// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ItemType } from "../common.sol";

struct ItemMetadataData {
  ItemType itemType;
  bool stackable;
  int16 attackBonus;
  int16 strengthBonus;
  int16 defenseBonus;
  int16 rangedBonus;
  uint8 requiredAttackLevel;
  uint8 requiredStrengthLevel;
  uint8 requiredDefenseLevel;
  uint8 requiredRangedLevel;
  uint16 heals;
  string name;
}

library ItemMetadata {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "hyperscape", name: "ItemMetadata", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746268797065727363617065000000004974656d4d6574616461746100000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00100b0101010202020201010101020000000000000000000000000000000000);

  // Hex-encoded key schema of (uint16)
  Schema constant _keySchema = Schema.wrap(0x0002010001000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, bool, int16, int16, int16, int16, uint8, uint8, uint8, uint8, uint16, string)
  Schema constant _valueSchema = Schema.wrap(0x00100b010060212121210000000001c500000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "itemId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](12);
    fieldNames[0] = "itemType";
    fieldNames[1] = "stackable";
    fieldNames[2] = "attackBonus";
    fieldNames[3] = "strengthBonus";
    fieldNames[4] = "defenseBonus";
    fieldNames[5] = "rangedBonus";
    fieldNames[6] = "requiredAttackLevel";
    fieldNames[7] = "requiredStrengthLevel";
    fieldNames[8] = "requiredDefenseLevel";
    fieldNames[9] = "requiredRangedLevel";
    fieldNames[10] = "heals";
    fieldNames[11] = "name";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get itemType.
   */
  function getItemType(uint16 itemId) internal view returns (ItemType itemType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ItemType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get itemType.
   */
  function _getItemType(uint16 itemId) internal view returns (ItemType itemType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return ItemType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set itemType.
   */
  function setItemType(uint16 itemId, ItemType itemType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(itemType)), _fieldLayout);
  }

  /**
   * @notice Set itemType.
   */
  function _setItemType(uint16 itemId, ItemType itemType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(itemType)), _fieldLayout);
  }

  /**
   * @notice Get stackable.
   */
  function getStackable(uint16 itemId) internal view returns (bool stackable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get stackable.
   */
  function _getStackable(uint16 itemId) internal view returns (bool stackable) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set stackable.
   */
  function setStackable(uint16 itemId, bool stackable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((stackable)), _fieldLayout);
  }

  /**
   * @notice Set stackable.
   */
  function _setStackable(uint16 itemId, bool stackable) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((stackable)), _fieldLayout);
  }

  /**
   * @notice Get attackBonus.
   */
  function getAttackBonus(uint16 itemId) internal view returns (int16 attackBonus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get attackBonus.
   */
  function _getAttackBonus(uint16 itemId) internal view returns (int16 attackBonus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set attackBonus.
   */
  function setAttackBonus(uint16 itemId, int16 attackBonus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((attackBonus)), _fieldLayout);
  }

  /**
   * @notice Set attackBonus.
   */
  function _setAttackBonus(uint16 itemId, int16 attackBonus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((attackBonus)), _fieldLayout);
  }

  /**
   * @notice Get strengthBonus.
   */
  function getStrengthBonus(uint16 itemId) internal view returns (int16 strengthBonus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get strengthBonus.
   */
  function _getStrengthBonus(uint16 itemId) internal view returns (int16 strengthBonus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set strengthBonus.
   */
  function setStrengthBonus(uint16 itemId, int16 strengthBonus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((strengthBonus)), _fieldLayout);
  }

  /**
   * @notice Set strengthBonus.
   */
  function _setStrengthBonus(uint16 itemId, int16 strengthBonus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((strengthBonus)), _fieldLayout);
  }

  /**
   * @notice Get defenseBonus.
   */
  function getDefenseBonus(uint16 itemId) internal view returns (int16 defenseBonus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get defenseBonus.
   */
  function _getDefenseBonus(uint16 itemId) internal view returns (int16 defenseBonus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set defenseBonus.
   */
  function setDefenseBonus(uint16 itemId, int16 defenseBonus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((defenseBonus)), _fieldLayout);
  }

  /**
   * @notice Set defenseBonus.
   */
  function _setDefenseBonus(uint16 itemId, int16 defenseBonus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((defenseBonus)), _fieldLayout);
  }

  /**
   * @notice Get rangedBonus.
   */
  function getRangedBonus(uint16 itemId) internal view returns (int16 rangedBonus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Get rangedBonus.
   */
  function _getRangedBonus(uint16 itemId) internal view returns (int16 rangedBonus) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (int16(uint16(bytes2(_blob))));
  }

  /**
   * @notice Set rangedBonus.
   */
  function setRangedBonus(uint16 itemId, int16 rangedBonus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((rangedBonus)), _fieldLayout);
  }

  /**
   * @notice Set rangedBonus.
   */
  function _setRangedBonus(uint16 itemId, int16 rangedBonus) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((rangedBonus)), _fieldLayout);
  }

  /**
   * @notice Get requiredAttackLevel.
   */
  function getRequiredAttackLevel(uint16 itemId) internal view returns (uint8 requiredAttackLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get requiredAttackLevel.
   */
  function _getRequiredAttackLevel(uint16 itemId) internal view returns (uint8 requiredAttackLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set requiredAttackLevel.
   */
  function setRequiredAttackLevel(uint16 itemId, uint8 requiredAttackLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((requiredAttackLevel)), _fieldLayout);
  }

  /**
   * @notice Set requiredAttackLevel.
   */
  function _setRequiredAttackLevel(uint16 itemId, uint8 requiredAttackLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((requiredAttackLevel)), _fieldLayout);
  }

  /**
   * @notice Get requiredStrengthLevel.
   */
  function getRequiredStrengthLevel(uint16 itemId) internal view returns (uint8 requiredStrengthLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get requiredStrengthLevel.
   */
  function _getRequiredStrengthLevel(uint16 itemId) internal view returns (uint8 requiredStrengthLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set requiredStrengthLevel.
   */
  function setRequiredStrengthLevel(uint16 itemId, uint8 requiredStrengthLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((requiredStrengthLevel)), _fieldLayout);
  }

  /**
   * @notice Set requiredStrengthLevel.
   */
  function _setRequiredStrengthLevel(uint16 itemId, uint8 requiredStrengthLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((requiredStrengthLevel)), _fieldLayout);
  }

  /**
   * @notice Get requiredDefenseLevel.
   */
  function getRequiredDefenseLevel(uint16 itemId) internal view returns (uint8 requiredDefenseLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get requiredDefenseLevel.
   */
  function _getRequiredDefenseLevel(uint16 itemId) internal view returns (uint8 requiredDefenseLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set requiredDefenseLevel.
   */
  function setRequiredDefenseLevel(uint16 itemId, uint8 requiredDefenseLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((requiredDefenseLevel)), _fieldLayout);
  }

  /**
   * @notice Set requiredDefenseLevel.
   */
  function _setRequiredDefenseLevel(uint16 itemId, uint8 requiredDefenseLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((requiredDefenseLevel)), _fieldLayout);
  }

  /**
   * @notice Get requiredRangedLevel.
   */
  function getRequiredRangedLevel(uint16 itemId) internal view returns (uint8 requiredRangedLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get requiredRangedLevel.
   */
  function _getRequiredRangedLevel(uint16 itemId) internal view returns (uint8 requiredRangedLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set requiredRangedLevel.
   */
  function setRequiredRangedLevel(uint16 itemId, uint8 requiredRangedLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((requiredRangedLevel)), _fieldLayout);
  }

  /**
   * @notice Set requiredRangedLevel.
   */
  function _setRequiredRangedLevel(uint16 itemId, uint8 requiredRangedLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((requiredRangedLevel)), _fieldLayout);
  }

  /**
   * @notice Get heals.
   */
  function getHeals(uint16 itemId) internal view returns (uint16 heals) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get heals.
   */
  function _getHeals(uint16 itemId) internal view returns (uint16 heals) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set heals.
   */
  function setHeals(uint16 itemId, uint16 heals) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((heals)), _fieldLayout);
  }

  /**
   * @notice Set heals.
   */
  function _setHeals(uint16 itemId, uint16 heals) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((heals)), _fieldLayout);
  }

  /**
   * @notice Get name.
   */
  function getName(uint16 itemId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get name.
   */
  function _getName(uint16 itemId) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set name.
   */
  function setName(uint16 itemId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Set name.
   */
  function _setName(uint16 itemId, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Get the length of name.
   */
  function lengthName(uint16 itemId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of name.
   */
  function _lengthName(uint16 itemId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemName(uint16 itemId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemName(uint16 itemId, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to name.
   */
  function pushName(uint16 itemId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to name.
   */
  function _pushName(uint16 itemId, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from name.
   */
  function popName(uint16 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from name.
   */
  function _popName(uint16 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function updateName(uint16 itemId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function _updateName(uint16 itemId, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint16 itemId) internal view returns (ItemMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint16 itemId) internal view returns (ItemMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint16 itemId,
    ItemType itemType,
    bool stackable,
    int16 attackBonus,
    int16 strengthBonus,
    int16 defenseBonus,
    int16 rangedBonus,
    uint8 requiredAttackLevel,
    uint8 requiredStrengthLevel,
    uint8 requiredDefenseLevel,
    uint8 requiredRangedLevel,
    uint16 heals,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      itemType,
      stackable,
      attackBonus,
      strengthBonus,
      defenseBonus,
      rangedBonus,
      requiredAttackLevel,
      requiredStrengthLevel,
      requiredDefenseLevel,
      requiredRangedLevel,
      heals
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint16 itemId,
    ItemType itemType,
    bool stackable,
    int16 attackBonus,
    int16 strengthBonus,
    int16 defenseBonus,
    int16 rangedBonus,
    uint8 requiredAttackLevel,
    uint8 requiredStrengthLevel,
    uint8 requiredDefenseLevel,
    uint8 requiredRangedLevel,
    uint16 heals,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      itemType,
      stackable,
      attackBonus,
      strengthBonus,
      defenseBonus,
      rangedBonus,
      requiredAttackLevel,
      requiredStrengthLevel,
      requiredDefenseLevel,
      requiredRangedLevel,
      heals
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint16 itemId, ItemMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.itemType,
      _table.stackable,
      _table.attackBonus,
      _table.strengthBonus,
      _table.defenseBonus,
      _table.rangedBonus,
      _table.requiredAttackLevel,
      _table.requiredStrengthLevel,
      _table.requiredDefenseLevel,
      _table.requiredRangedLevel,
      _table.heals
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint16 itemId, ItemMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.itemType,
      _table.stackable,
      _table.attackBonus,
      _table.strengthBonus,
      _table.defenseBonus,
      _table.rangedBonus,
      _table.requiredAttackLevel,
      _table.requiredStrengthLevel,
      _table.requiredDefenseLevel,
      _table.requiredRangedLevel,
      _table.heals
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      ItemType itemType,
      bool stackable,
      int16 attackBonus,
      int16 strengthBonus,
      int16 defenseBonus,
      int16 rangedBonus,
      uint8 requiredAttackLevel,
      uint8 requiredStrengthLevel,
      uint8 requiredDefenseLevel,
      uint8 requiredRangedLevel,
      uint16 heals
    )
  {
    itemType = ItemType(uint8(Bytes.getBytes1(_blob, 0)));

    stackable = (_toBool(uint8(Bytes.getBytes1(_blob, 1))));

    attackBonus = (int16(uint16(Bytes.getBytes2(_blob, 2))));

    strengthBonus = (int16(uint16(Bytes.getBytes2(_blob, 4))));

    defenseBonus = (int16(uint16(Bytes.getBytes2(_blob, 6))));

    rangedBonus = (int16(uint16(Bytes.getBytes2(_blob, 8))));

    requiredAttackLevel = (uint8(Bytes.getBytes1(_blob, 10)));

    requiredStrengthLevel = (uint8(Bytes.getBytes1(_blob, 11)));

    requiredDefenseLevel = (uint8(Bytes.getBytes1(_blob, 12)));

    requiredRangedLevel = (uint8(Bytes.getBytes1(_blob, 13)));

    heals = (uint16(Bytes.getBytes2(_blob, 14)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (string memory name) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ItemMetadataData memory _table) {
    (
      _table.itemType,
      _table.stackable,
      _table.attackBonus,
      _table.strengthBonus,
      _table.defenseBonus,
      _table.rangedBonus,
      _table.requiredAttackLevel,
      _table.requiredStrengthLevel,
      _table.requiredDefenseLevel,
      _table.requiredRangedLevel,
      _table.heals
    ) = decodeStatic(_staticData);

    (_table.name) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint16 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint16 itemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    ItemType itemType,
    bool stackable,
    int16 attackBonus,
    int16 strengthBonus,
    int16 defenseBonus,
    int16 rangedBonus,
    uint8 requiredAttackLevel,
    uint8 requiredStrengthLevel,
    uint8 requiredDefenseLevel,
    uint8 requiredRangedLevel,
    uint16 heals
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        itemType,
        stackable,
        attackBonus,
        strengthBonus,
        defenseBonus,
        rangedBonus,
        requiredAttackLevel,
        requiredStrengthLevel,
        requiredDefenseLevel,
        requiredRangedLevel,
        heals
      );
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(string memory name) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(name).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory name) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((name)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    ItemType itemType,
    bool stackable,
    int16 attackBonus,
    int16 strengthBonus,
    int16 defenseBonus,
    int16 rangedBonus,
    uint8 requiredAttackLevel,
    uint8 requiredStrengthLevel,
    uint8 requiredDefenseLevel,
    uint8 requiredRangedLevel,
    uint16 heals,
    string memory name
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      itemType,
      stackable,
      attackBonus,
      strengthBonus,
      defenseBonus,
      rangedBonus,
      requiredAttackLevel,
      requiredStrengthLevel,
      requiredDefenseLevel,
      requiredRangedLevel,
      heals
    );

    EncodedLengths _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint16 itemId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(itemId));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
