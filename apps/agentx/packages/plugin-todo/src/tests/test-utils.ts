import type { IAgentRuntime, Plugin, Action, Provider, Service, UUID, Memory } from '@elizaos/core';
import { mock } from 'bun:test';

// Create a mock runtime for testing
export function createMockRuntime(overrides: Partial<IAgentRuntime> = {}): IAgentRuntime {
  const defaultRuntime: IAgentRuntime = {
    agentId: 'test-agent' as UUID,
    db: null,
    character: {
      name: 'TestAgent',
      description: 'A test agent',
      instructions: 'Test instructions',
      personality: 'Test personality',
      modelProvider: 'openai',
      settings: {},
    },
    actions: [] as Action[],
    providers: [] as Provider[],
    services: new Map<string, Service>(),
    plugins: [] as Plugin[],
    evaluators: [],
    events: new Map(),
    routes: [],
    logger: console,
    fetch: null,

    // IAgentRuntime methods
    initialize: mock(() => Promise.resolve()),
    stop: mock(() => Promise.resolve()),
    getService: mock(() => null),
    getServicesByType: mock(() => []),
    getAllServices: mock(() => new Map()),
    registerService: mock(() => Promise.resolve()),
    getRegisteredServiceTypes: mock(() => []),
    hasService: mock(() => false),
    getSetting: mock((key: string) => null),
    setSetting: mock(),
    useModel: mock(() => Promise.resolve('Mock response')),
    composeState: mock(() => Promise.resolve({ values: {}, text: '', data: {} })),
    processActions: mock(() => Promise.resolve()),
    evaluate: mock(() => Promise.resolve(null)),
    ensureParticipantInRoom: mock(() => Promise.resolve()),
    getRoom: mock(() => Promise.resolve(null)),
    ensureConnection: mock(() => Promise.resolve()),
    ensureConnections: mock(() => Promise.resolve()),
    ensureWorldExists: mock(() => Promise.resolve()),
    ensureRoomExists: mock(() => Promise.resolve()),
    registerDatabaseAdapter: mock(),
    emitEvent: mock(() => Promise.resolve()),
    registerPlugin: mock(() => Promise.resolve()),
    registerProvider: mock(),
    registerAction: mock(),
    registerEvaluator: mock(),
    registerModel: mock(),
    getModel: mock(() => undefined),
    registerEvent: mock(),
    getEvent: mock(() => undefined),
    registerTaskWorker: mock(),
    getTaskWorker: mock(() => undefined),
    addEmbeddingToMemory: mock(() => Promise.resolve({} as Memory)),
    getAllMemories: mock(() => Promise.resolve([])),
    clearAllAgentMemories: mock(() => Promise.resolve()),
    createRunId: mock(() => 'test-run-id' as UUID),
    startRun: mock(() => 'test-run-id' as UUID),
    endRun: mock(),
    getCurrentRunId: mock(() => 'test-run-id' as UUID),
    getEntityById: mock(() => Promise.resolve(null)),
    createEntity: mock(() => Promise.resolve(true)),
    createRoom: mock(() => Promise.resolve('test-room-id' as UUID)),
    addParticipant: mock(() => Promise.resolve(true)),
    getRooms: mock(() => Promise.resolve([])),
    registerSendHandler: mock(),
    sendMessageToTarget: mock(() => Promise.resolve()),
    getConversationLength: mock(() => 0),

    // IDatabaseAdapter methods (IAgentRuntime extends IDatabaseAdapter)
    init: mock(() => Promise.resolve()),
    runMigrations: mock(() => Promise.resolve()),
    isReady: mock(() => Promise.resolve(true)),
    close: mock(() => Promise.resolve()),
    getConnection: mock(() => Promise.resolve(null)),
    getAgent: mock(() => Promise.resolve(null)),
    getAgents: mock(() => Promise.resolve([])),
    createAgent: mock(() => Promise.resolve(true)),
    updateAgent: mock(() => Promise.resolve(true)),
    deleteAgent: mock(() => Promise.resolve(true)),
    ensureEmbeddingDimension: mock(() => Promise.resolve()),
    getEntitiesByIds: mock(() => Promise.resolve([])),
    getEntitiesForRoom: mock(() => Promise.resolve([])),
    createEntities: mock(() => Promise.resolve(true)),
    updateEntity: mock(() => Promise.resolve()),
    getComponent: mock(() => Promise.resolve(null)),
    getComponents: mock(() => Promise.resolve([])),
    createComponent: mock(() => Promise.resolve(true)),
    updateComponent: mock(() => Promise.resolve()),
    deleteComponent: mock(() => Promise.resolve()),
    createMemory: mock(() => Promise.resolve('test-memory-id' as UUID)),
    searchMemories: mock(() => Promise.resolve([])),
    searchMemoriesByEmbedding: mock(() => Promise.resolve([])),
    getMemoriesWithActions: mock(() => Promise.resolve([])),
    getMemoryActions: mock(() => Promise.resolve([])),
    getMemory: mock(() => Promise.resolve(null)),
    getMemories: mock(() => Promise.resolve([])),
    getCachedEmbeddings: mock(() => Promise.resolve([])),
    getWorldsByParticipant: mock(() => Promise.resolve([])),
    getRelationship: mock(() => Promise.resolve(null)),
    createRelationship: mock(() => Promise.resolve(true)),
    updateRelationship: mock(() => Promise.resolve(true)),
    getRelationships: mock(() => Promise.resolve([])),
    getCache: mock(() => Promise.resolve(undefined)),
    setCache: mock(() => Promise.resolve(true)),
    deleteCache: mock(() => Promise.resolve(true)),
    createTask: mock(() => Promise.resolve('test-task-id' as UUID)),
    getTasks: mock(() => Promise.resolve([])),
    getTask: mock(() => Promise.resolve(null)),
    getTasksByName: mock(() => Promise.resolve([])),
    updateTask: mock(() => Promise.resolve()),
    deleteTask: mock(() => Promise.resolve()),
    getMemoriesByWorldId: mock(() => Promise.resolve([])),
  } as unknown as IAgentRuntime;

  // Apply overrides
  return {
    ...defaultRuntime,
    ...overrides,
    // Ensure nested objects are properly merged
    character: {
      ...defaultRuntime.character,
      ...(overrides.character || {}),
    },
  };
}
