name: Deploy to Mainnet

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "deploy-to-mainnet" to confirm'
        required: true
      security_checklist_completed:
        description: 'Security audit completed? (yes/no)'
        required: true
      testnet_stable_weeks:
        description: 'How many weeks has testnet been stable?'
        required: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: mainnet

jobs:
  validate-prerequisites:
    name: Validate Prerequisites
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "deploy-to-mainnet" ]; then
            echo "❌ Deployment cancelled - confirmation not provided"
            exit 1
          fi
      
      - name: Validate security audit
        run: |
          if [ "${{ github.event.inputs.security_checklist_completed }}" != "yes" ]; then
            echo "❌ Security audit must be completed before mainnet deployment"
            exit 1
          fi
      
      - name: Validate testnet stability
        run: |
          if [ "${{ github.event.inputs.testnet_stable_weeks }}" -lt "4" ]; then
            echo "❌ Testnet must be stable for at least 4 weeks before mainnet"
            exit 1
          fi
      
      - name: Prerequisites validated
        run: |
          echo "✅ All prerequisites validated"
          echo "✅ Confirmation received"
          echo "✅ Security audit completed"
          echo "✅ Testnet stable for ${{ github.event.inputs.testnet_stable_weeks }} weeks"

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate-prerequisites
    environment:
      name: mainnet
      url: https://rpc.jeju.network
    defaults:
      run:
        working-directory: terraform/environments/mainnet
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_MAINNET }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        run: terraform plan -out=tfplan
      
      - name: Upload plan for review
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/environments/mainnet/tfplan
      
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: core-team
          minimum-approvals: 2
      
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
      
      - name: Save outputs
        run: terraform output -json > outputs.json
      
      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/environments/mainnet/outputs.json

  deploy-contracts:
    name: Deploy Contracts to Base
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment:
      name: mainnet
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
      
      - name: Deploy L1 contracts to Base Mainnet
        env:
          DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY_MAINNET }}
          DEPLOYER_ADDRESS: ${{ secrets.DEPLOYER_ADDRESS }}
          L1_RPC_URL: https://mainnet.base.org
          L1_CHAIN_ID: 8453
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        run: bun run deploy:mainnet
      
      - name: Verify contracts on BaseScan
        env:
          BASESCAN_API_KEY: ${{ secrets.BASESCAN_API_KEY }}
        run: bun run verify:mainnet
      
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contract-deployments
          path: contracts/deployments/mainnet/
      
      - name: Create deployment report
        run: |
          echo "# Mainnet Deployment Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "**Date**: $(date)" >> deployment-report.md
          echo "**Settlement Layer**: Base (Chain ID 8453)" >> deployment-report.md
          echo "**Deployer**: ${{ secrets.DEPLOYER_ADDRESS }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Deployed Contracts" >> deployment-report.md
          cat contracts/deployments/mainnet/deployment.json | jq '.' >> deployment-report.md
      
      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md

  deploy-kubernetes:
    name: Deploy Kubernetes Services
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-contracts]
    environment:
      name: mainnet
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_MAINNET }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
      
      - name: Download contract deployments
        uses: actions/download-artifact@v4
        with:
          name: contract-deployments
          path: contracts/deployments/mainnet/
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name jeju-mainnet
      
      - name: Create Kubernetes namespaces
        run: |
          kubectl create namespace op-stack --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace execution --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace da --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace explorer --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace observability --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace infra --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Install Helmfile
        run: |
          wget https://github.com/helmfile/helmfile/releases/download/v0.162.0/helmfile_0.162.0_linux_amd64.tar.gz
          tar -xzf helmfile_0.162.0_linux_amd64.tar.gz
          sudo mv helmfile /usr/local/bin/
      
      - name: Deploy Helm charts
        working-directory: kubernetes/helmfile
        run: |
          helmfile -e mainnet sync
      
      - name: Wait for rollout
        run: |
          kubectl rollout status statefulset/reth-sequencer -n execution --timeout=15m
          kubectl rollout status deployment/op-node -n op-stack --timeout=10m
          kubectl rollout status deployment/op-batcher -n op-stack --timeout=10m
          kubectl rollout status deployment/op-proposer -n op-stack --timeout=10m

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy-kubernetes
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
      
      - name: Run health checks
        env:
          L1_RPC_URL: https://mainnet.base.org
          L2_RPC_URL: https://rpc.jeju.network
        run: |
          # Test L2 is responding
          cast block latest --rpc-url $L2_RPC_URL
          
          # Test can send transactions
          echo "✅ L2 RPC responding"
          
          # Verify settlement layer connectivity
          cast block latest --rpc-url $L1_RPC_URL
          echo "✅ Base L2 (settlement layer) connectivity confirmed"
      
      - name: Notify on success
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "✅ Mainnet deployment successful!",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Jeju L3 Mainnet Deployed Successfully*\n\n• Settlement: Base (Chain ID 8453)\n• L3 Chain ID: 8888\n• RPC: https://rpc.jeju.network\n• Explorer: https://explorer.jeju.network\n\nJob: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
      
      - name: Notify on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            {
              "text": "❌ Mainnet deployment failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Mainnet deployment failed\nJob: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }

