name: "Setup Pipeline Data Branch"
description: "Sets up a worktree for the pipeline-data branch and syncs data"
inputs:
  operation:
    description: "Operation to perform: setup, update, or cleanup"
    required: true
  data_dir:
    description: "Directory containing data files to sync (relative to the main workspace)"
    required: false
    default: "./data"
  exclude_pattern:
    description: "Pattern to exclude when copying files"
    required: false
    default: "*.sqlite"
  commit_message:
    description: "Commit message for updates"
    required: false
    default: 'Pipeline run: $(date -u +"%Y-%m-%d %H:%M")'
  branch_name:
    description: "Name of the branch to store pipeline data"
    required: false
    default: "_data"

runs:
  using: "composite"
  steps:
    # Setup operation - creates worktree and copies data to workspace
    - name: Setup pipeline-data branch
      if: inputs.operation == 'setup'
      shell: bash
      run: |
        set -e
        mkdir -p ${{ inputs.data_dir }}
        # Configure git
        git config user.name "GitHub Actions Bot"
        git config user.email "actions@github.com"

        # Check if pipeline-data branch exists
        if git ls-remote --heads origin ${{ inputs.branch_name }} | grep ${{ inputs.branch_name }}; then
          echo "Pipeline data branch exists, retrieving data..."
          
          # Create a worktree for pipeline-data branch and check out the branch directly
          git fetch origin ${{ inputs.branch_name }}
          git worktree add .pipeline-data-worktree origin/${{ inputs.branch_name }}
          
          # Copy all data files from worktree to main workspace
          echo "Copying all data files from worktree to workspace..."
          rsync -av .pipeline-data-worktree/data/ ${{ inputs.data_dir }}/
        else
          echo "Creating new pipeline-data branch..."
          
          # Create a worktree with new orphan branch
          git worktree add --detach .pipeline-data-worktree
          cd .pipeline-data-worktree
          git checkout --orphan ${{ inputs.branch_name }}
          git rm -rf . 2>/dev/null || true
          
          # Create .gitignore that only keeps data directory
          echo "# Ignore everything except data directory" > .gitignore
          echo "/*" >> .gitignore
          echo "!data/" >> .gitignore
          echo "!.gitignore" >> .gitignore
          echo "!README.md" >> .gitignore
          echo "" >> .gitignore
          echo "# Exclude database file" >> .gitignore
          echo "data/db.sqlite" >> .gitignore
          
          # Create a README
          echo "# Pipeline Data" > README.md
          echo "This branch contains data files generated by the pipeline. Do not modify manually." >> README.md
          
          git add .gitignore README.md
          git commit -m "Initialize pipeline-data branch" || true
          
          # Push the new branch to the remote
          git push -u origin ${{ inputs.branch_name }}
          cd ..
        fi

    # Update operation - copies data from workspace to pipeline-data branch and commits
    - name: Update pipeline-data branch
      if: inputs.operation == 'update'
      shell: bash
      run: |
        set -e
        cd .pipeline-data-worktree

        # Ensure data directory exists
        mkdir -p data

        # Copy current data files from main workspace to pipeline-data branch
        rsync -av --delete ../${{ inputs.data_dir }}/ data/ --exclude=${{ inputs.exclude_pattern }}

        # Add and commit changes
        git add -A data/
        if git diff-index --quiet HEAD; then
          echo "No changes to commit"
        else
          git commit -m "${{ inputs.commit_message }}"
          # Push with error handling
          if ! git push origin HEAD:${{ inputs.branch_name }}; then
            echo "Failed to push normally. Forcing push..."
            git fetch origin ${{ inputs.branch_name }}
            # Force push changes
            git push --force origin HEAD:${{ inputs.branch_name }}
          fi
        fi
        cd ..

    # Cleanup operation - removes the worktree
    - name: Cleanup worktree
      if: inputs.operation == 'cleanup'
      shell: bash
      run: git worktree remove .pipeline-data-worktree || true
