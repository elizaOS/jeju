---
alwaysApply: true
---

# Important interfaces for elizaos

/**
 * Represents the core runtime environment for an agent.
 * Defines methods for database interaction, plugin management, event handling,
 * state composition, model usage, and task management.
 */
interface IAgentRuntime extends IDatabaseAdapter {
    agentId: UUID;
    character: Character;
    providers: Provider[];
    actions: Action[];
    evaluators: Evaluator[];
    plugins: Plugin[];
    services: Map<ServiceTypeName, Service[]>;
    events: Map<string, ((params: any) => Promise<void>)[]>;
    fetch?: typeof fetch | null;
    routes: Route[];
    logger: any;
    registerPlugin(plugin: Plugin): Promise<void>;
    initialize(): Promise<void>;
    getConnection(): Promise<any>;
    getService<T extends Service>(service: ServiceTypeName | string): T | null;
    getServicesByType<T extends Service>(service: ServiceTypeName | string): T[];
    getAllServices(): Map<ServiceTypeName, Service[]>;
    registerService(service: typeof Service): Promise<void>;
    getRegisteredServiceTypes(): ServiceTypeName[];
    hasService(serviceType: ServiceTypeName | string): boolean;
    registerDatabaseAdapter(adapter: IDatabaseAdapter): void;
    setSetting(key: string, value: string | boolean | null | any, secret?: boolean): void;
    getSetting(key: string): string | boolean | null | any;
    getConversationLength(): number;
    processActions(message: Memory, responses: Memory[], state?: State, callback?: HandlerCallback): Promise<void>;
    evaluate(message: Memory, state?: State, didRespond?: boolean, callback?: HandlerCallback, responses?: Memory[]): Promise<Evaluator[] | null>;
    registerProvider(provider: Provider): void;
    registerAction(action: Action): void;
    registerEvaluator(evaluator: Evaluator): void;
    ensureConnections(entities: Entity[], rooms: Room[], source: string, world: World): Promise<void>;
    ensureConnection({ entityId, roomId, metadata, userName, worldName, name, source, channelId, serverId, type, worldId, userId, }: {
        entityId: UUID;
        roomId: UUID;
        userName?: string;
        name?: string;
        worldName?: string;
        source?: string;
        channelId?: string;
        serverId?: string;
        type: any;
        worldId: UUID;
        userId?: UUID;
        metadata?: Record<string, any>;
    }): Promise<void>;
    ensureParticipantInRoom(entityId: UUID, roomId: UUID): Promise<void>;
    ensureWorldExists(world: World): Promise<void>;
    ensureRoomExists(room: Room): Promise<void>;
    composeState(message: Memory, includeList?: string[], onlyInclude?: boolean, skipCache?: boolean): Promise<State>;
    useModel<T extends ModelTypeName, R = ModelResultMap[T]>(modelType: T, params: Omit<ModelParamsMap[T], 'runtime'> | any): Promise<R>;
    registerModel(modelType: ModelTypeName | string, handler: (params: any) => Promise<any>, provider: string, priority?: number): void;
    getModel(modelType: ModelTypeName | string): ((runtime: IAgentRuntime, params: any) => Promise<any>) | undefined;
    registerEvent(event: string, handler: (params: any) => Promise<void>): void;
    getEvent(event: string): ((params: any) => Promise<void>)[] | undefined;
    emitEvent(event: string | string[], params: any): Promise<void>;
    registerTaskWorker(taskHandler: TaskWorker): void;
    getTaskWorker(name: string): TaskWorker | undefined;
    stop(): Promise<void>;
    addEmbeddingToMemory(memory: Memory): Promise<Memory>;
    getAllMemories(): Promise<Memory[]>;
    clearAllAgentMemories(): Promise<void>;
    createRunId(): UUID;
    startRun(): UUID;
    endRun(): void;
    getCurrentRunId(): UUID;
    getEntityById(entityId: UUID): Promise<Entity | null>;
    getRoom(roomId: UUID): Promise<Room | null>;
    createEntity(entity: Entity): Promise<boolean>;
    createRoom({ id, name, source, type, channelId, serverId, worldId }: Room): Promise<UUID>;
    addParticipant(entityId: UUID, roomId: UUID): Promise<boolean>;
    getRooms(worldId: UUID): Promise<Room[]>;
    registerSendHandler(source: string, handler: SendHandlerFunction): void;
    sendMessageToTarget(target: TargetInfo, content: Content): Promise<void>;
}

/**
 * Example content with associated user for demonstration purposes
 */
interface ActionExample {
    /** User associated with the example */
    name: string;
    /** Content of the example */
    content: Content;
}
/**
 * Callback function type for handlers
 */
type HandlerCallback = (response: Content, files?: any) => Promise<Memory[]>;
/**
 * Handler function type for processing messages
 */
type Handler = (runtime: IAgentRuntime, message: Memory, state?: State, options?: {
    [key: string]: unknown;
}, callback?: HandlerCallback, responses?: Memory[]) => Promise<ActionResult | void | undefined>;
/**
 * Validator function type for actions/evaluators
 */
type Validator = (runtime: IAgentRuntime, message: Memory, state?: State) => Promise<boolean>;
/**
 * Represents an action the agent can perform
 */
interface Action {
    /** Similar action descriptions */
    similes?: string[];
    /** Detailed description */
    description: string;
    /** Example usages */
    examples?: ActionExample[][];
    /** Handler function */
    handler: Handler;
    /** Action name */
    name: string;
    /** Validation function */
    validate: Validator;
}
/**
 * Example for evaluating agent behavior
 */
interface EvaluationExample {
    /** Evaluation context */
    prompt: string;
    /** Example messages */
    messages: Array<ActionExample>;
    /** Expected outcome */
    outcome: string;
}
/**
 * Evaluator for assessing agent responses
 */
interface Evaluator {
    /** Whether to always run */
    alwaysRun?: boolean;
    /** Detailed description */
    description: string;
    /** Similar evaluator descriptions */
    similes?: string[];
    /** Example evaluations */
    examples: EvaluationExample[];
    /** Handler function */
    handler: Handler;
    /** Evaluator name */
    name: string;
    /** Validation function */
    validate: Validator;
}
interface ProviderResult {
    values?: {
        [key: string]: any;
    };
    data?: {
        [key: string]: any;
    };
    text?: string;
}
/**
 * Provider for external data/services
 */
interface Provider {
    /** Provider name */
    name: string;
    /** Description of the provider */
    description?: string;
    /** Whether the provider is dynamic */
    dynamic?: boolean;
    /** Position of the provider in the provider list, positive or negative */
    position?: number;
    /**
     * Whether the provider is private
     *
     * Private providers are not displayed in the regular provider list, they have to be called explicitly
     */
    private?: boolean;
    /** Data retrieval function */
    get: (runtime: IAgentRuntime, message: Memory, state: State) => Promise<ProviderResult>;
}

/**
 * Interface for database operations
 */
interface IDatabaseAdapter {
    /** Database instance */
    db: any;
    /** Initialize database connection */
    initialize(config?: any): Promise<void>;
    /** Initialize database connection */
    init(): Promise<void>;
    /** Run database migrations */
    runMigrations(schema?: any, pluginName?: string): Promise<void>;
    /** Check if the database connection is ready */
    isReady(): Promise<boolean>;
    /** Close database connection */
    close(): Promise<void>;
    getConnection(): Promise<any>;
    getAgent(agentId: UUID): Promise<Agent | null>;
    /** Get all agents */
    getAgents(): Promise<Partial<Agent>[]>;
    createAgent(agent: Partial<Agent>): Promise<boolean>;
    updateAgent(agentId: UUID, agent: Partial<Agent>): Promise<boolean>;
    deleteAgent(agentId: UUID): Promise<boolean>;
    ensureEmbeddingDimension(dimension: number): Promise<void>;
    /** Get entity by IDs */
    getEntitiesByIds(entityIds: UUID[]): Promise<Entity[] | null>;
    /** Get entities for room */
    getEntitiesForRoom(roomId: UUID, includeComponents?: boolean): Promise<Entity[]>;
    /** Create new entities */
    createEntities(entities: Entity[]): Promise<boolean>;
    /** Update entity */
    updateEntity(entity: Entity): Promise<void>;
    /** Get component by ID */
    getComponent(entityId: UUID, type: string, worldId?: UUID, sourceEntityId?: UUID): Promise<Component | null>;
    /** Get all components for an entity */
    getComponents(entityId: UUID, worldId?: UUID, sourceEntityId?: UUID): Promise<Component[]>;
    /** Create component */
    createComponent(component: Component): Promise<boolean>;
    /** Update component */
    updateComponent(component: Component): Promise<void>;
    /** Delete component */
    deleteComponent(componentId: UUID): Promise<void>;
    /** Get memories matching criteria */
    getMemories(params: {
        entityId?: UUID;
        agentId?: UUID;
        count?: number;
        unique?: boolean;
        tableName: string;
        start?: number;
        end?: number;
        roomId?: UUID;
        worldId?: UUID;
    }): Promise<Memory[]>;
    getMemoryById(id: UUID): Promise<Memory | null>;
    getMemoriesByIds(ids: UUID[], tableName?: string): Promise<Memory[]>;
    getMemoriesByRoomIds(params: {
        tableName: string;
        roomIds: UUID[];
        limit?: number;
    }): Promise<Memory[]>;
    getCachedEmbeddings(params: {
        query_table_name: string;
        query_threshold: number;
        query_input: string;
        query_field_name: string;
        query_field_sub_name: string;
        query_match_count: number;
    }): Promise<{
        embedding: number[];
        levenshtein_score: number;
    }[]>;
    log(params: {
        body: {
            [key: string]: unknown;
        };
        entityId: UUID;
        roomId: UUID;
        type: string;
    }): Promise<void>;
    getLogs(params: {
        entityId: UUID;
        roomId?: UUID;
        type?: string;
        count?: number;
        offset?: number;
    }): Promise<Log[]>;
    deleteLog(logId: UUID): Promise<void>;
    searchMemories(params: {
        embedding: number[];
        match_threshold?: number;
        count?: number;
        unique?: boolean;
        tableName: string;
        query?: string;
        roomId?: UUID;
        worldId?: UUID;
        entityId?: UUID;
    }): Promise<Memory[]>;
    createMemory(memory: Memory, tableName: string, unique?: boolean): Promise<UUID>;
    updateMemory(memory: Partial<Memory> & {
        id: UUID;
        metadata?: MemoryMetadata;
    }): Promise<boolean>;
    deleteMemory(memoryId: UUID): Promise<void>;
    deleteManyMemories(memoryIds: UUID[]): Promise<void>;
    deleteAllMemories(roomId: UUID, tableName: string): Promise<void>;
    countMemories(roomId: UUID, unique?: boolean, tableName?: string): Promise<number>;
    createWorld(world: World): Promise<UUID>;
    getWorld(id: UUID): Promise<World | null>;
    removeWorld(id: UUID): Promise<void>;
    getAllWorlds(): Promise<World[]>;
    updateWorld(world: World): Promise<void>;
    getRoomsByIds(roomIds: UUID[]): Promise<Room[] | null>;
    createRooms(rooms: Room[]): Promise<UUID[]>;
    deleteRoom(roomId: UUID): Promise<void>;
    deleteRoomsByWorldId(worldId: UUID): Promise<void>;
    updateRoom(room: Room): Promise<void>;
    getRoomsForParticipant(entityId: UUID): Promise<UUID[]>;
    getRoomsForParticipants(userIds: UUID[]): Promise<UUID[]>;
    getRoomsByWorld(worldId: UUID): Promise<Room[]>;
    removeParticipant(entityId: UUID, roomId: UUID): Promise<boolean>;
    getParticipantsForEntity(entityId: UUID): Promise<Participant[]>;
    getParticipantsForRoom(roomId: UUID): Promise<UUID[]>;
    addParticipantsRoom(entityIds: UUID[], roomId: UUID): Promise<boolean>;
    getParticipantUserState(roomId: UUID, entityId: UUID): Promise<'FOLLOWED' | 'MUTED' | null>;
    setParticipantUserState(roomId: UUID, entityId: UUID, state: 'FOLLOWED' | 'MUTED' | null): Promise<void>;
    /**
     * Creates a new relationship between two entities.
     * @param params Object containing the relationship details
     * @returns Promise resolving to boolean indicating success
     */
    createRelationship(params: {
        sourceEntityId: UUID;
        targetEntityId: UUID;
        tags?: string[];
        metadata?: Metadata;
    }): Promise<boolean>;
    /**
     * Updates an existing relationship between two entities.
     * @param relationship The relationship object with updated data
     * @returns Promise resolving to void
     */
    updateRelationship(relationship: Relationship): Promise<void>;
    /**
     * Retrieves a relationship between two entities if it exists.
     * @param params Object containing the entity IDs and agent ID
     * @returns Promise resolving to the Relationship object or null if not found
     */
    getRelationship(params: {
        sourceEntityId: UUID;
        targetEntityId: UUID;
    }): Promise<Relationship | null>;
    /**
     * Retrieves all relationships for a specific entity.
     * @param params Object containing the user ID, agent ID and optional tags to filter by
     * @returns Promise resolving to an array of Relationship objects
     */
    getRelationships(params: {
        entityId: UUID;
        tags?: string[];
    }): Promise<Relationship[]>;
    getCache<T>(key: string): Promise<T | undefined>;
    setCache<T>(key: string, value: T): Promise<boolean>;
    deleteCache(key: string): Promise<boolean>;
    createTask(task: Task): Promise<UUID>;
    getTasks(params: {
        roomId?: UUID;
        tags?: string[];
        entityId?: UUID;
    }): Promise<Task[]>;
    getTask(id: UUID): Promise<Task | null>;
    getTasksByName(name: string): Promise<Task[]>;
    updateTask(id: UUID, task: Partial<Task>): Promise<void>;
    deleteTask(id: UUID): Promise<void>;
    getMemoriesByWorldId(params: {
        worldId: UUID;
        count?: number;
        tableName?: string;
    }): Promise<Memory[]>;
}

/**
 * Result returned by an action after execution
 * Used for action chaining and state management
 */
interface ActionResult {
    /** Optional text description of the result */
    text?: string;
    /** Values to merge into the state */
    values?: Record<string, any>;
    /** Data payload containing action-specific results */
    data?: Record<string, any>;
    /** Whether the action succeeded - defaults to true */
    success: boolean;
    /** Error information if the action failed */
    error?: string | Error;
}

declare abstract class Service {
    /** Runtime instance */
    protected runtime: IAgentRuntime;
    constructor(runtime?: IAgentRuntime);
    abstract stop(): Promise<void>;
    /** Service type */
    static serviceType: string;
    /** Service name */
    abstract capabilityDescription: string;
    /** Service configuration */
    config?: Metadata;
    /** Start service connection */
    static start(_runtime: IAgentRuntime): Promise<Service>;
    /** Stop service connection */
    static stop(_runtime: IAgentRuntime): Promise<unknown>;
}