// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { MobType } from "../common.sol";

struct MobLootTableData {
  uint32 coinMin;
  uint32 coinMax;
  uint16 itemId1;
  uint16 itemId1Chance;
  uint16 itemId2;
  uint16 itemId2Chance;
  uint16 itemId3;
  uint16 itemId3Chance;
  uint16 itemId4;
  uint16 itemId4Chance;
}

library MobLootTable {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "hyperscape", name: "MobLootTable", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746268797065727363617065000000004d6f624c6f6f745461626c6500000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00180a0004040202020202020202000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint8)
  Schema constant _keySchema = Schema.wrap(0x0001010000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint32, uint32, uint16, uint16, uint16, uint16, uint16, uint16, uint16, uint16)
  Schema constant _valueSchema = Schema.wrap(0x00180a0003030101010101010101000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "mobType";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "coinMin";
    fieldNames[1] = "coinMax";
    fieldNames[2] = "itemId1";
    fieldNames[3] = "itemId1Chance";
    fieldNames[4] = "itemId2";
    fieldNames[5] = "itemId2Chance";
    fieldNames[6] = "itemId3";
    fieldNames[7] = "itemId3Chance";
    fieldNames[8] = "itemId4";
    fieldNames[9] = "itemId4Chance";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get coinMin.
   */
  function getCoinMin(MobType mobType) internal view returns (uint32 coinMin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get coinMin.
   */
  function _getCoinMin(MobType mobType) internal view returns (uint32 coinMin) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set coinMin.
   */
  function setCoinMin(MobType mobType, uint32 coinMin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((coinMin)), _fieldLayout);
  }

  /**
   * @notice Set coinMin.
   */
  function _setCoinMin(MobType mobType, uint32 coinMin) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((coinMin)), _fieldLayout);
  }

  /**
   * @notice Get coinMax.
   */
  function getCoinMax(MobType mobType) internal view returns (uint32 coinMax) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get coinMax.
   */
  function _getCoinMax(MobType mobType) internal view returns (uint32 coinMax) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set coinMax.
   */
  function setCoinMax(MobType mobType, uint32 coinMax) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((coinMax)), _fieldLayout);
  }

  /**
   * @notice Set coinMax.
   */
  function _setCoinMax(MobType mobType, uint32 coinMax) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((coinMax)), _fieldLayout);
  }

  /**
   * @notice Get itemId1.
   */
  function getItemId1(MobType mobType) internal view returns (uint16 itemId1) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get itemId1.
   */
  function _getItemId1(MobType mobType) internal view returns (uint16 itemId1) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set itemId1.
   */
  function setItemId1(MobType mobType, uint16 itemId1) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((itemId1)), _fieldLayout);
  }

  /**
   * @notice Set itemId1.
   */
  function _setItemId1(MobType mobType, uint16 itemId1) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((itemId1)), _fieldLayout);
  }

  /**
   * @notice Get itemId1Chance.
   */
  function getItemId1Chance(MobType mobType) internal view returns (uint16 itemId1Chance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get itemId1Chance.
   */
  function _getItemId1Chance(MobType mobType) internal view returns (uint16 itemId1Chance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set itemId1Chance.
   */
  function setItemId1Chance(MobType mobType, uint16 itemId1Chance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((itemId1Chance)), _fieldLayout);
  }

  /**
   * @notice Set itemId1Chance.
   */
  function _setItemId1Chance(MobType mobType, uint16 itemId1Chance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((itemId1Chance)), _fieldLayout);
  }

  /**
   * @notice Get itemId2.
   */
  function getItemId2(MobType mobType) internal view returns (uint16 itemId2) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get itemId2.
   */
  function _getItemId2(MobType mobType) internal view returns (uint16 itemId2) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set itemId2.
   */
  function setItemId2(MobType mobType, uint16 itemId2) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((itemId2)), _fieldLayout);
  }

  /**
   * @notice Set itemId2.
   */
  function _setItemId2(MobType mobType, uint16 itemId2) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((itemId2)), _fieldLayout);
  }

  /**
   * @notice Get itemId2Chance.
   */
  function getItemId2Chance(MobType mobType) internal view returns (uint16 itemId2Chance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get itemId2Chance.
   */
  function _getItemId2Chance(MobType mobType) internal view returns (uint16 itemId2Chance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set itemId2Chance.
   */
  function setItemId2Chance(MobType mobType, uint16 itemId2Chance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((itemId2Chance)), _fieldLayout);
  }

  /**
   * @notice Set itemId2Chance.
   */
  function _setItemId2Chance(MobType mobType, uint16 itemId2Chance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((itemId2Chance)), _fieldLayout);
  }

  /**
   * @notice Get itemId3.
   */
  function getItemId3(MobType mobType) internal view returns (uint16 itemId3) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get itemId3.
   */
  function _getItemId3(MobType mobType) internal view returns (uint16 itemId3) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set itemId3.
   */
  function setItemId3(MobType mobType, uint16 itemId3) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((itemId3)), _fieldLayout);
  }

  /**
   * @notice Set itemId3.
   */
  function _setItemId3(MobType mobType, uint16 itemId3) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((itemId3)), _fieldLayout);
  }

  /**
   * @notice Get itemId3Chance.
   */
  function getItemId3Chance(MobType mobType) internal view returns (uint16 itemId3Chance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get itemId3Chance.
   */
  function _getItemId3Chance(MobType mobType) internal view returns (uint16 itemId3Chance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set itemId3Chance.
   */
  function setItemId3Chance(MobType mobType, uint16 itemId3Chance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((itemId3Chance)), _fieldLayout);
  }

  /**
   * @notice Set itemId3Chance.
   */
  function _setItemId3Chance(MobType mobType, uint16 itemId3Chance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((itemId3Chance)), _fieldLayout);
  }

  /**
   * @notice Get itemId4.
   */
  function getItemId4(MobType mobType) internal view returns (uint16 itemId4) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get itemId4.
   */
  function _getItemId4(MobType mobType) internal view returns (uint16 itemId4) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set itemId4.
   */
  function setItemId4(MobType mobType, uint16 itemId4) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((itemId4)), _fieldLayout);
  }

  /**
   * @notice Set itemId4.
   */
  function _setItemId4(MobType mobType, uint16 itemId4) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((itemId4)), _fieldLayout);
  }

  /**
   * @notice Get itemId4Chance.
   */
  function getItemId4Chance(MobType mobType) internal view returns (uint16 itemId4Chance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Get itemId4Chance.
   */
  function _getItemId4Chance(MobType mobType) internal view returns (uint16 itemId4Chance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint16(bytes2(_blob)));
  }

  /**
   * @notice Set itemId4Chance.
   */
  function setItemId4Chance(MobType mobType, uint16 itemId4Chance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((itemId4Chance)), _fieldLayout);
  }

  /**
   * @notice Set itemId4Chance.
   */
  function _setItemId4Chance(MobType mobType, uint16 itemId4Chance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((itemId4Chance)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(MobType mobType) internal view returns (MobLootTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(MobType mobType) internal view returns (MobLootTableData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    MobType mobType,
    uint32 coinMin,
    uint32 coinMax,
    uint16 itemId1,
    uint16 itemId1Chance,
    uint16 itemId2,
    uint16 itemId2Chance,
    uint16 itemId3,
    uint16 itemId3Chance,
    uint16 itemId4,
    uint16 itemId4Chance
  ) internal {
    bytes memory _staticData = encodeStatic(
      coinMin,
      coinMax,
      itemId1,
      itemId1Chance,
      itemId2,
      itemId2Chance,
      itemId3,
      itemId3Chance,
      itemId4,
      itemId4Chance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    MobType mobType,
    uint32 coinMin,
    uint32 coinMax,
    uint16 itemId1,
    uint16 itemId1Chance,
    uint16 itemId2,
    uint16 itemId2Chance,
    uint16 itemId3,
    uint16 itemId3Chance,
    uint16 itemId4,
    uint16 itemId4Chance
  ) internal {
    bytes memory _staticData = encodeStatic(
      coinMin,
      coinMax,
      itemId1,
      itemId1Chance,
      itemId2,
      itemId2Chance,
      itemId3,
      itemId3Chance,
      itemId4,
      itemId4Chance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(MobType mobType, MobLootTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.coinMin,
      _table.coinMax,
      _table.itemId1,
      _table.itemId1Chance,
      _table.itemId2,
      _table.itemId2Chance,
      _table.itemId3,
      _table.itemId3Chance,
      _table.itemId4,
      _table.itemId4Chance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(MobType mobType, MobLootTableData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.coinMin,
      _table.coinMax,
      _table.itemId1,
      _table.itemId1Chance,
      _table.itemId2,
      _table.itemId2Chance,
      _table.itemId3,
      _table.itemId3Chance,
      _table.itemId4,
      _table.itemId4Chance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint32 coinMin,
      uint32 coinMax,
      uint16 itemId1,
      uint16 itemId1Chance,
      uint16 itemId2,
      uint16 itemId2Chance,
      uint16 itemId3,
      uint16 itemId3Chance,
      uint16 itemId4,
      uint16 itemId4Chance
    )
  {
    coinMin = (uint32(Bytes.getBytes4(_blob, 0)));

    coinMax = (uint32(Bytes.getBytes4(_blob, 4)));

    itemId1 = (uint16(Bytes.getBytes2(_blob, 8)));

    itemId1Chance = (uint16(Bytes.getBytes2(_blob, 10)));

    itemId2 = (uint16(Bytes.getBytes2(_blob, 12)));

    itemId2Chance = (uint16(Bytes.getBytes2(_blob, 14)));

    itemId3 = (uint16(Bytes.getBytes2(_blob, 16)));

    itemId3Chance = (uint16(Bytes.getBytes2(_blob, 18)));

    itemId4 = (uint16(Bytes.getBytes2(_blob, 20)));

    itemId4Chance = (uint16(Bytes.getBytes2(_blob, 22)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (MobLootTableData memory _table) {
    (
      _table.coinMin,
      _table.coinMax,
      _table.itemId1,
      _table.itemId1Chance,
      _table.itemId2,
      _table.itemId2Chance,
      _table.itemId3,
      _table.itemId3Chance,
      _table.itemId4,
      _table.itemId4Chance
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(MobType mobType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(MobType mobType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint32 coinMin,
    uint32 coinMax,
    uint16 itemId1,
    uint16 itemId1Chance,
    uint16 itemId2,
    uint16 itemId2Chance,
    uint16 itemId3,
    uint16 itemId3Chance,
    uint16 itemId4,
    uint16 itemId4Chance
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        coinMin,
        coinMax,
        itemId1,
        itemId1Chance,
        itemId2,
        itemId2Chance,
        itemId3,
        itemId3Chance,
        itemId4,
        itemId4Chance
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint32 coinMin,
    uint32 coinMax,
    uint16 itemId1,
    uint16 itemId1Chance,
    uint16 itemId2,
    uint16 itemId2Chance,
    uint16 itemId3,
    uint16 itemId3Chance,
    uint16 itemId4,
    uint16 itemId4Chance
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      coinMin,
      coinMax,
      itemId1,
      itemId1Chance,
      itemId2,
      itemId2Chance,
      itemId3,
      itemId3Chance,
      itemId4,
      itemId4Chance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(MobType mobType) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint8(mobType)));

    return _keyTuple;
  }
}
