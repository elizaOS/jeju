#!/usr/bin/env bun
/**
 * @title Node Staking End-to-End Test
 * @notice Comprehensive test of the complete multi-token node staking system
 * 
 * ⚠️  DISABLED: This file needs complete rewrite for multi-token system
 * 
 * The old NodeOperatorRewards has been replaced with NodeStakingManager.
 * This test file needs to be updated to:
 * - Deploy TokenRegistry, PaymasterFactory, PriceOracle
 * - Test multi-token staking (stake ELIZA, earn USDC, etc.)
 * - Verify paymaster fee distribution
 * - Test USD-denominated minimums
 * - Test anti-Sybil protections
 * 
 * Original Test Flow (needs updating):
 * 1. Deploy all contracts (TokenRegistry, PaymasterFactory, PriceOracle, NodeStakingManager)
 * 2. Register multiple nodes (multi-token staking)
 * 3. Run oracle to update performance
 * 4. Verify RPC endpoints
 * 5. Claim rewards (in chosen reward token)
 * 6. Verify balances and paymaster fees
 * 7. Test slashing
 * 8. Test metadata updates
 */

import { expect } from 'bun:test';
import { $ } from 'bun';
import { ethers } from 'ethers';

describe('Node Staking System E2E (Multi-Token)', () => {
  let provider: ethers.Provider;
  let deployer: ethers.Wallet;
  let operator1: ethers.Wallet;
  let operator2: ethers.Wallet;
  let oracle: ethers.Wallet;
  
  let elizaToken: ethers.Contract;
  let usdcToken: ethers.Contract;
  let stakingManager: ethers.Contract;
  let tokenRegistry: ethers.Contract;
  let paymasterFactory: ethers.Contract;
  let priceOracle: ethers.Contract;
  
  let node1Id: string;
  let node2Id: string;
  
  const INITIAL_BALANCE = ethers.parseEther('10000'); // 10k tokens per operator
  const STAKE_AMOUNT = ethers.parseEther('1000'); // 1k tokens stake
  
  beforeAll(async () => {
    console.log('\n🚀 Setting up E2E test environment...\n');
    
    // Start localnet
    console.log('📦 Starting Kurtosis localnet...');
    await $`bun run scripts/localnet/start.ts`.quiet();
    
    // Get RPC endpoint
    const l2Port = await $`kurtosis port print jeju-localnet op-geth rpc`.text();
    const rpcUrl = `http://${l2Port.trim()}`;
    
    provider = new ethers.JsonRpcProvider(rpcUrl);
    
    // Create wallets
    deployer = new ethers.Wallet(
      '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',
      provider
    );
    operator1 = new ethers.Wallet(ethers.Wallet.createRandom().privateKey, provider);
    operator2 = new ethers.Wallet(ethers.Wallet.createRandom().privateKey, provider);
    oracle = new ethers.Wallet(ethers.Wallet.createRandom().privateKey, provider);
    
    console.log(`   Deployer: ${deployer.address}`);
    console.log(`   Operator 1: ${operator1.address}`);
    console.log(`   Operator 2: ${operator2.address}`);
    console.log(`   Oracle: ${oracle.address}\n`);
    
    // Fund wallets
    console.log('💰 Funding test wallets...');
    await deployer.sendTransaction({
      to: operator1.address,
      value: ethers.parseEther('1'),
    });
    await deployer.sendTransaction({
      to: operator2.address,
      value: ethers.parseEther('1'),
    });
    await deployer.sendTransaction({
      to: oracle.address,
      value: ethers.parseEther('0.1'),
    });
    
    console.log('✅ Wallets funded\n');
  });
  
  afterAll(async () => {
    console.log('\n🧹 Cleaning up test environment...\n');
    await $`kurtosis enclave rm -f jeju-localnet`.quiet().nothrow();
  });
  
  test('Deploy reward token and rewards contract', async () => {
    console.log('\n📝 Test: Deploy contracts\n');
    
    // Deploy mock ERC20 token
    const tokenFactory = new ethers.ContractFactory(
      ['function mint(address to, uint256 amount) external'],
      '0x', // Bytecode placeholder - use actual token deployment
      deployer
    );
    
    // For now, use existing deployment
    const deploymentFile = await Bun.file('contracts/deployments/rewards-localnet.json').json();
    
    rewardToken = new ethers.Contract(
      deploymentFile.rewardToken,
      ['function balanceOf(address) external view returns (uint256)', 'function transfer(address, uint256) external returns (bool)', 'function approve(address, uint256) external returns (bool)', 'function transferFrom(address, address, uint256) external returns (bool)'],
      deployer
    );
    
    rewardsContract = new ethers.Contract(
      deploymentFile.nodeOperatorRewards,
      ['function registerNode(string calldata rpcUrl, uint8 geographicRegion, uint256 stakeAmount) external returns (bytes32)', 'function getPerformanceOracles() external view returns (address[])', 'function totalActiveNodes() external view returns (uint256)'],
      deployer
    );
    
    const oracles = await rewardsContract.getPerformanceOracles();
    
    expect(oracles.length).toBeGreaterThan(0);
    console.log(`✅ ${oracles.length} oracle(s) registered\n`);
  });
  
  test('Fund operators with reward tokens', async () => {
    console.log('\n📝 Test: Fund operators\n');
    
    // Transfer tokens to operators
    await rewardToken.transfer(operator1.address, INITIAL_BALANCE);
    await rewardToken.transfer(operator2.address, INITIAL_BALANCE);
    
    const balance1 = await rewardToken.balanceOf(operator1.address);
    const balance2 = await rewardToken.balanceOf(operator2.address);
    
    expect(balance1).toBe(INITIAL_BALANCE);
    expect(balance2).toBe(INITIAL_BALANCE);
    
    console.log(`✅ Operators funded: ${ethers.formatEther(INITIAL_BALANCE)} tokens each\n`);
  });
  
  test('Register nodes and stake tokens', async () => {
    console.log('\n📝 Test: Register nodes\n');
    
    // Operator 1 approves and registers
    const token1 = rewardToken.connect(operator1);
    await token1.approve(rewardsContract.target, STAKE_AMOUNT);
    
    const rewards1 = rewardsContract.connect(operator1);
    const tx1 = await rewards1.registerNode(
      'https://rpc1.example.com',
      3, // Region.Asia
      STAKE_AMOUNT
    );
    const receipt1 = await tx1.wait();
    
    // Extract nodeId from events
    // This is simplified - in real test, parse the NodeRegistered event
    node1Id = receipt1.logs[0].topics[1]; // Assume first indexed param is nodeId
    
    console.log(`✅ Node 1 registered: ${node1Id.slice(0, 10)}...\n`);
    
    // Operator 2 approves and registers  
    const token2 = rewardToken.connect(operator2);
    await token2.approve(rewardsContract.target, STAKE_AMOUNT);
    
    const rewards2 = rewardsContract.connect(operator2);
    const tx2 = await rewards2.registerNode(
      'https://rpc2.example.com',
      2, // Region.Europe
      STAKE_AMOUNT
    );
    const receipt2 = await tx2.wait();
    
    node2Id = receipt2.logs[0].topics[1];
    
    console.log(`✅ Node 2 registered: ${node2Id.slice(0, 10)}...\n`);
    
    // Verify total active nodes
    const activeNodes = await rewardsContract.totalActiveNodes();
    expect(activeNodes).toBe(2n);
    
    console.log(`✅ Total active nodes: ${activeNodes}\n`);
  });
  
  test('Oracle updates performance data', async () => {
    console.log('\n📝 Test: Oracle updates\n');
    
    const rewardsWithOracle = rewardsContract.connect(oracle);
    
    // Update performance for node 1
    await rewardsWithOracle.updatePerformance(
      node1Id,
      9950, // 99.50% uptime
      500000, // 500k requests
      50 // 50ms avg response
    );
    
    console.log(`✅ Node 1 performance updated\n`);
    
    // Update performance for node 2
    await rewardsWithOracle.updatePerformance(
      node2Id,
      9800, // 98.00% uptime
      250000, // 250k requests
      75 // 75ms avg response
    );
    
    console.log(`✅ Node 2 performance updated\n`);
  });
  
  test('Calculate and verify rewards', async () => {
    console.log('\n📝 Test: Calculate rewards\n');
    
    // Fast forward time 30 days
    await provider.send('evm_increaseTime', [30 * 24 * 60 * 60]);
    await provider.send('evm_mine', []);
    
    const rewardsABI = [
      'function calculateRewards(bytes32) external view returns (uint256)',
    ];
    const rewardsView = new ethers.Contract(
      rewardsContract.target,
      rewardsABI,
      provider
    );
    
    const rewards1 = await rewardsView.calculateRewards(node1Id);
    const rewards2 = await rewardsView.calculateRewards(node2Id);
    
    console.log(`   Node 1 rewards: ${ethers.formatEther(rewards1)} JEJU`);
    console.log(`   Node 2 rewards: ${ethers.formatEther(rewards2)} JEJU\n`);
    
    expect(rewards1).toBeGreaterThan(0n);
    expect(rewards2).toBeGreaterThan(0n);
    
    // Node 1 should have higher rewards (better uptime, more requests, underserved region)
    expect(rewards1).toBeGreaterThan(rewards2);
    
    console.log(`✅ Rewards calculated correctly\n`);
  });
  
  test('Claim rewards', async () => {
    console.log('\n📝 Test: Claim rewards\n');
    
    const balanceBefore1 = await rewardToken.balanceOf(operator1.address);
    
    const rewards1WithOperator = rewardsContract.connect(operator1);
    await rewards1WithOperator.claimRewards(node1Id);
    
    const balanceAfter1 = await rewardToken.balanceOf(operator1.address);
    const claimed = balanceAfter1 - balanceBefore1;
    
    console.log(`   Claimed: ${ethers.formatEther(claimed)} JEJU`);
    
    expect(claimed).toBeGreaterThan(0n);
    
    console.log(`✅ Rewards claimed successfully\n`);
  });
  
  test('Update node metadata', async () => {
    console.log('\n📝 Test: Update metadata\n');
    
    const rewards1 = rewardsContract.connect(operator1);
    
    await rewards1.updateNodeMetadata(
      node1Id,
      'https://new-rpc1.example.com',
      2 // Move to Europe
    );
    
    console.log(`✅ Node metadata updated\n`);
  });
  
  test('Slash misbehaving node', async () => {
    console.log('\n📝 Test: Slash node\n');
    
    // Owner slashes node 2 for 50%
    await rewardsContract.slashNode(
      node2Id,
      5000, // 50%
      'Extended downtime'
    );
    
    console.log(`✅ Node 2 slashed (50%)\n`);
    
    // Verify total active nodes decreased
    const activeNodes = await rewardsContract.totalActiveNodes();
    expect(activeNodes).toBe(1n); // Only node 1 is active
    
    console.log(`✅ Active nodes: ${activeNodes}\n`);
  });
  
  test('Slashed node can deregister and recover remaining stake', async () => {
    console.log('\n📝 Test: Deregister slashed node\n');
    
    const balanceBefore = await rewardToken.balanceOf(operator2.address);
    
    const rewards2 = rewardsContract.connect(operator2);
    await rewards2.deregisterNode(node2Id);
    
    const balanceAfter = await rewardToken.balanceOf(operator2.address);
    const recovered = balanceAfter - balanceBefore;
    
    console.log(`   Recovered: ${ethers.formatEther(recovered)} JEJU`);
    
    // Should get back 50% of stake (other 50% was slashed)
    const expectedRecovery = STAKE_AMOUNT / 2n;
    expect(recovered).toBe(expectedRecovery);
    
    console.log(`✅ Slashed node recovered remaining stake\n`);
  });
  
  test('Verify gas costs are reasonable', async () => {
    console.log('\n📝 Test: Gas costs\n');
    
    // Re-register node 2 to test gas
    const token2 = rewardToken.connect(operator2);
    await token2.approve(rewardsContract.target, STAKE_AMOUNT);
    
    const rewards2 = rewardsContract.connect(operator2);
    const tx = await rewards2.registerNode(
      'https://rpc3.example.com',
      1, // Region.SouthAmerica
      STAKE_AMOUNT
    );
    const receipt = await tx.wait();
    
    const gasUsed = Number(receipt.gasUsed);
    
    console.log(`   Registration gas: ${gasUsed.toLocaleString()}`);
    
    // Should be under 300k gas for registration
    expect(gasUsed).toBeLessThan(300000);
    
    console.log(`✅ Gas costs are reasonable\n`);
  });
});

// Run test if called directly
if (import.meta.main) {
  console.log('Running Node Rewards E2E Tests...\n');
  
  const { test, describe, expect, beforeAll, afterAll } = await import('bun:test');
  
  // Import test framework
  const runner = await import('bun:test');
  
  console.log('\n✅ All E2E tests completed successfully!\n');
}

