# Task ID: 17
# Title: Update Pipeline Configuration for Activity-Centric Scoring System
# Status: pending
# Dependencies: 16
# Priority: high
# Description: Restructure the pipeline configuration to implement an activity-centric scoring system that calculates scores based on individual activities with customizable parameters and tag modifiers.
# Details:
This task involves updating the pipeline configuration files to support the new activity-centric scoring approach. Specifically:

1. Modify the config structure to include a new 'activities' section that defines scoring rules for each activity type:
   - Each activity should have a 'baseScore' parameter defining its default value
   - Include 'tagBonus' configurations that specify score multipliers or additive bonuses for activities with specific tags
   - Define score decay or expiration rules if applicable

2. Update the 'scoring' section to reference these activity-specific rules and define how individual activity scores are aggregated into overall user scores

3. Enhance the 'tags' section to include metadata about each tag type, including:
   - Tag categories (e.g., skill-based, quality-based, difficulty-based)
   - Tag weights or importance factors
   - Tag relationships (parent/child relationships if applicable)

4. Add configuration options for score normalization and capping to prevent exploitation

5. Include documentation within the configuration files explaining the scoring formula and how different parameters affect the final score

6. Ensure backward compatibility or provide migration scripts for existing configurations

The configuration should be in YAML or JSON format, consistent with existing pipeline configurations.

# Test Strategy:
Testing should verify that the updated configuration properly supports the activity-centric scoring system:

1. Unit tests:
   - Validate that the configuration parser correctly loads and interprets the new structure
   - Test that all required fields are validated (error on missing required fields)
   - Verify that default values are applied when optional fields are omitted

2. Integration tests:
   - Create test configurations with various activity types and tag combinations
   - Verify that the scoring pipeline correctly applies baseScore and tagBonus modifiers
   - Test edge cases including activities with multiple tags, extreme score values, etc.

3. Regression tests:
   - Ensure that existing functionality continues to work with the new configuration
   - Compare scores calculated with old and new configurations for the same input data

4. Configuration validation tests:
   - Create a schema validator that confirms all configurations adhere to the new structure
   - Test with intentionally malformed configurations to ensure proper error handling

5. Performance tests:
   - Measure any impact on configuration loading time or memory usage
   - Verify that complex scoring rules don't significantly impact processing speed
