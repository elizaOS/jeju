// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GatheringSkillsData {
  uint8 woodcuttingLevel;
  uint32 woodcuttingXp;
  uint8 fishingLevel;
  uint32 fishingXp;
  uint8 firemakingLevel;
  uint32 firemakingXp;
  uint8 cookingLevel;
  uint32 cookingXp;
}

library GatheringSkills {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "hyperscape", name: "GatheringSkills", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626879706572736361706500000000476174686572696e67536b696c6c7300);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0014080001040104010401040000000000000000000000000000000000000000);

  // Hex-encoded key schema of (address)
  Schema constant _keySchema = Schema.wrap(0x0014010061000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint32, uint8, uint32, uint8, uint32, uint8, uint32)
  Schema constant _valueSchema = Schema.wrap(0x0014080000030003000300030000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "player";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "woodcuttingLevel";
    fieldNames[1] = "woodcuttingXp";
    fieldNames[2] = "fishingLevel";
    fieldNames[3] = "fishingXp";
    fieldNames[4] = "firemakingLevel";
    fieldNames[5] = "firemakingXp";
    fieldNames[6] = "cookingLevel";
    fieldNames[7] = "cookingXp";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get woodcuttingLevel.
   */
  function getWoodcuttingLevel(address player) internal view returns (uint8 woodcuttingLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get woodcuttingLevel.
   */
  function _getWoodcuttingLevel(address player) internal view returns (uint8 woodcuttingLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set woodcuttingLevel.
   */
  function setWoodcuttingLevel(address player, uint8 woodcuttingLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((woodcuttingLevel)), _fieldLayout);
  }

  /**
   * @notice Set woodcuttingLevel.
   */
  function _setWoodcuttingLevel(address player, uint8 woodcuttingLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((woodcuttingLevel)), _fieldLayout);
  }

  /**
   * @notice Get woodcuttingXp.
   */
  function getWoodcuttingXp(address player) internal view returns (uint32 woodcuttingXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get woodcuttingXp.
   */
  function _getWoodcuttingXp(address player) internal view returns (uint32 woodcuttingXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set woodcuttingXp.
   */
  function setWoodcuttingXp(address player, uint32 woodcuttingXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((woodcuttingXp)), _fieldLayout);
  }

  /**
   * @notice Set woodcuttingXp.
   */
  function _setWoodcuttingXp(address player, uint32 woodcuttingXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((woodcuttingXp)), _fieldLayout);
  }

  /**
   * @notice Get fishingLevel.
   */
  function getFishingLevel(address player) internal view returns (uint8 fishingLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get fishingLevel.
   */
  function _getFishingLevel(address player) internal view returns (uint8 fishingLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set fishingLevel.
   */
  function setFishingLevel(address player, uint8 fishingLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((fishingLevel)), _fieldLayout);
  }

  /**
   * @notice Set fishingLevel.
   */
  function _setFishingLevel(address player, uint8 fishingLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((fishingLevel)), _fieldLayout);
  }

  /**
   * @notice Get fishingXp.
   */
  function getFishingXp(address player) internal view returns (uint32 fishingXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get fishingXp.
   */
  function _getFishingXp(address player) internal view returns (uint32 fishingXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set fishingXp.
   */
  function setFishingXp(address player, uint32 fishingXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((fishingXp)), _fieldLayout);
  }

  /**
   * @notice Set fishingXp.
   */
  function _setFishingXp(address player, uint32 fishingXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((fishingXp)), _fieldLayout);
  }

  /**
   * @notice Get firemakingLevel.
   */
  function getFiremakingLevel(address player) internal view returns (uint8 firemakingLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get firemakingLevel.
   */
  function _getFiremakingLevel(address player) internal view returns (uint8 firemakingLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set firemakingLevel.
   */
  function setFiremakingLevel(address player, uint8 firemakingLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((firemakingLevel)), _fieldLayout);
  }

  /**
   * @notice Set firemakingLevel.
   */
  function _setFiremakingLevel(address player, uint8 firemakingLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((firemakingLevel)), _fieldLayout);
  }

  /**
   * @notice Get firemakingXp.
   */
  function getFiremakingXp(address player) internal view returns (uint32 firemakingXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get firemakingXp.
   */
  function _getFiremakingXp(address player) internal view returns (uint32 firemakingXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set firemakingXp.
   */
  function setFiremakingXp(address player, uint32 firemakingXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((firemakingXp)), _fieldLayout);
  }

  /**
   * @notice Set firemakingXp.
   */
  function _setFiremakingXp(address player, uint32 firemakingXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((firemakingXp)), _fieldLayout);
  }

  /**
   * @notice Get cookingLevel.
   */
  function getCookingLevel(address player) internal view returns (uint8 cookingLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get cookingLevel.
   */
  function _getCookingLevel(address player) internal view returns (uint8 cookingLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set cookingLevel.
   */
  function setCookingLevel(address player, uint8 cookingLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((cookingLevel)), _fieldLayout);
  }

  /**
   * @notice Set cookingLevel.
   */
  function _setCookingLevel(address player, uint8 cookingLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((cookingLevel)), _fieldLayout);
  }

  /**
   * @notice Get cookingXp.
   */
  function getCookingXp(address player) internal view returns (uint32 cookingXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get cookingXp.
   */
  function _getCookingXp(address player) internal view returns (uint32 cookingXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set cookingXp.
   */
  function setCookingXp(address player, uint32 cookingXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((cookingXp)), _fieldLayout);
  }

  /**
   * @notice Set cookingXp.
   */
  function _setCookingXp(address player, uint32 cookingXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((cookingXp)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(address player) internal view returns (GatheringSkillsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(address player) internal view returns (GatheringSkillsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address player,
    uint8 woodcuttingLevel,
    uint32 woodcuttingXp,
    uint8 fishingLevel,
    uint32 fishingXp,
    uint8 firemakingLevel,
    uint32 firemakingXp,
    uint8 cookingLevel,
    uint32 cookingXp
  ) internal {
    bytes memory _staticData = encodeStatic(
      woodcuttingLevel,
      woodcuttingXp,
      fishingLevel,
      fishingXp,
      firemakingLevel,
      firemakingXp,
      cookingLevel,
      cookingXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address player,
    uint8 woodcuttingLevel,
    uint32 woodcuttingXp,
    uint8 fishingLevel,
    uint32 fishingXp,
    uint8 firemakingLevel,
    uint32 firemakingXp,
    uint8 cookingLevel,
    uint32 cookingXp
  ) internal {
    bytes memory _staticData = encodeStatic(
      woodcuttingLevel,
      woodcuttingXp,
      fishingLevel,
      fishingXp,
      firemakingLevel,
      firemakingXp,
      cookingLevel,
      cookingXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(address player, GatheringSkillsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.woodcuttingLevel,
      _table.woodcuttingXp,
      _table.fishingLevel,
      _table.fishingXp,
      _table.firemakingLevel,
      _table.firemakingXp,
      _table.cookingLevel,
      _table.cookingXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(address player, GatheringSkillsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.woodcuttingLevel,
      _table.woodcuttingXp,
      _table.fishingLevel,
      _table.fishingXp,
      _table.firemakingLevel,
      _table.firemakingXp,
      _table.cookingLevel,
      _table.cookingXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint8 woodcuttingLevel,
      uint32 woodcuttingXp,
      uint8 fishingLevel,
      uint32 fishingXp,
      uint8 firemakingLevel,
      uint32 firemakingXp,
      uint8 cookingLevel,
      uint32 cookingXp
    )
  {
    woodcuttingLevel = (uint8(Bytes.getBytes1(_blob, 0)));

    woodcuttingXp = (uint32(Bytes.getBytes4(_blob, 1)));

    fishingLevel = (uint8(Bytes.getBytes1(_blob, 5)));

    fishingXp = (uint32(Bytes.getBytes4(_blob, 6)));

    firemakingLevel = (uint8(Bytes.getBytes1(_blob, 10)));

    firemakingXp = (uint32(Bytes.getBytes4(_blob, 11)));

    cookingLevel = (uint8(Bytes.getBytes1(_blob, 15)));

    cookingXp = (uint32(Bytes.getBytes4(_blob, 16)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (GatheringSkillsData memory _table) {
    (
      _table.woodcuttingLevel,
      _table.woodcuttingXp,
      _table.fishingLevel,
      _table.fishingXp,
      _table.firemakingLevel,
      _table.firemakingXp,
      _table.cookingLevel,
      _table.cookingXp
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address player) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address player) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint8 woodcuttingLevel,
    uint32 woodcuttingXp,
    uint8 fishingLevel,
    uint32 fishingXp,
    uint8 firemakingLevel,
    uint32 firemakingXp,
    uint8 cookingLevel,
    uint32 cookingXp
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        woodcuttingLevel,
        woodcuttingXp,
        fishingLevel,
        fishingXp,
        firemakingLevel,
        firemakingXp,
        cookingLevel,
        cookingXp
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 woodcuttingLevel,
    uint32 woodcuttingXp,
    uint8 fishingLevel,
    uint32 fishingXp,
    uint8 firemakingLevel,
    uint32 firemakingXp,
    uint8 cookingLevel,
    uint32 cookingXp
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      woodcuttingLevel,
      woodcuttingXp,
      fishingLevel,
      fishingXp,
      firemakingLevel,
      firemakingXp,
      cookingLevel,
      cookingXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(address player) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    return _keyTuple;
  }
}
