// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct CombatSkillsData {
  uint8 attackLevel;
  uint32 attackXp;
  uint8 strengthLevel;
  uint32 strengthXp;
  uint8 defenseLevel;
  uint32 defenseXp;
  uint8 constitutionLevel;
  uint32 constitutionXp;
  uint8 rangedLevel;
  uint32 rangedXp;
}

library CombatSkills {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "hyperscape", name: "CombatSkills", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626879706572736361706500000000436f6d626174536b696c6c7300000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00190a0001040104010401040104000000000000000000000000000000000000);

  // Hex-encoded key schema of (address)
  Schema constant _keySchema = Schema.wrap(0x0014010061000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint32, uint8, uint32, uint8, uint32, uint8, uint32, uint8, uint32)
  Schema constant _valueSchema = Schema.wrap(0x00190a0000030003000300030003000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "player";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "attackLevel";
    fieldNames[1] = "attackXp";
    fieldNames[2] = "strengthLevel";
    fieldNames[3] = "strengthXp";
    fieldNames[4] = "defenseLevel";
    fieldNames[5] = "defenseXp";
    fieldNames[6] = "constitutionLevel";
    fieldNames[7] = "constitutionXp";
    fieldNames[8] = "rangedLevel";
    fieldNames[9] = "rangedXp";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get attackLevel.
   */
  function getAttackLevel(address player) internal view returns (uint8 attackLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get attackLevel.
   */
  function _getAttackLevel(address player) internal view returns (uint8 attackLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set attackLevel.
   */
  function setAttackLevel(address player, uint8 attackLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((attackLevel)), _fieldLayout);
  }

  /**
   * @notice Set attackLevel.
   */
  function _setAttackLevel(address player, uint8 attackLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((attackLevel)), _fieldLayout);
  }

  /**
   * @notice Get attackXp.
   */
  function getAttackXp(address player) internal view returns (uint32 attackXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get attackXp.
   */
  function _getAttackXp(address player) internal view returns (uint32 attackXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set attackXp.
   */
  function setAttackXp(address player, uint32 attackXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((attackXp)), _fieldLayout);
  }

  /**
   * @notice Set attackXp.
   */
  function _setAttackXp(address player, uint32 attackXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((attackXp)), _fieldLayout);
  }

  /**
   * @notice Get strengthLevel.
   */
  function getStrengthLevel(address player) internal view returns (uint8 strengthLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get strengthLevel.
   */
  function _getStrengthLevel(address player) internal view returns (uint8 strengthLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set strengthLevel.
   */
  function setStrengthLevel(address player, uint8 strengthLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((strengthLevel)), _fieldLayout);
  }

  /**
   * @notice Set strengthLevel.
   */
  function _setStrengthLevel(address player, uint8 strengthLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((strengthLevel)), _fieldLayout);
  }

  /**
   * @notice Get strengthXp.
   */
  function getStrengthXp(address player) internal view returns (uint32 strengthXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get strengthXp.
   */
  function _getStrengthXp(address player) internal view returns (uint32 strengthXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set strengthXp.
   */
  function setStrengthXp(address player, uint32 strengthXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((strengthXp)), _fieldLayout);
  }

  /**
   * @notice Set strengthXp.
   */
  function _setStrengthXp(address player, uint32 strengthXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((strengthXp)), _fieldLayout);
  }

  /**
   * @notice Get defenseLevel.
   */
  function getDefenseLevel(address player) internal view returns (uint8 defenseLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get defenseLevel.
   */
  function _getDefenseLevel(address player) internal view returns (uint8 defenseLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set defenseLevel.
   */
  function setDefenseLevel(address player, uint8 defenseLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((defenseLevel)), _fieldLayout);
  }

  /**
   * @notice Set defenseLevel.
   */
  function _setDefenseLevel(address player, uint8 defenseLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((defenseLevel)), _fieldLayout);
  }

  /**
   * @notice Get defenseXp.
   */
  function getDefenseXp(address player) internal view returns (uint32 defenseXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get defenseXp.
   */
  function _getDefenseXp(address player) internal view returns (uint32 defenseXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set defenseXp.
   */
  function setDefenseXp(address player, uint32 defenseXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((defenseXp)), _fieldLayout);
  }

  /**
   * @notice Set defenseXp.
   */
  function _setDefenseXp(address player, uint32 defenseXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((defenseXp)), _fieldLayout);
  }

  /**
   * @notice Get constitutionLevel.
   */
  function getConstitutionLevel(address player) internal view returns (uint8 constitutionLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get constitutionLevel.
   */
  function _getConstitutionLevel(address player) internal view returns (uint8 constitutionLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set constitutionLevel.
   */
  function setConstitutionLevel(address player, uint8 constitutionLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((constitutionLevel)), _fieldLayout);
  }

  /**
   * @notice Set constitutionLevel.
   */
  function _setConstitutionLevel(address player, uint8 constitutionLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((constitutionLevel)), _fieldLayout);
  }

  /**
   * @notice Get constitutionXp.
   */
  function getConstitutionXp(address player) internal view returns (uint32 constitutionXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get constitutionXp.
   */
  function _getConstitutionXp(address player) internal view returns (uint32 constitutionXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set constitutionXp.
   */
  function setConstitutionXp(address player, uint32 constitutionXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((constitutionXp)), _fieldLayout);
  }

  /**
   * @notice Set constitutionXp.
   */
  function _setConstitutionXp(address player, uint32 constitutionXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((constitutionXp)), _fieldLayout);
  }

  /**
   * @notice Get rangedLevel.
   */
  function getRangedLevel(address player) internal view returns (uint8 rangedLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get rangedLevel.
   */
  function _getRangedLevel(address player) internal view returns (uint8 rangedLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set rangedLevel.
   */
  function setRangedLevel(address player, uint8 rangedLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((rangedLevel)), _fieldLayout);
  }

  /**
   * @notice Set rangedLevel.
   */
  function _setRangedLevel(address player, uint8 rangedLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((rangedLevel)), _fieldLayout);
  }

  /**
   * @notice Get rangedXp.
   */
  function getRangedXp(address player) internal view returns (uint32 rangedXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get rangedXp.
   */
  function _getRangedXp(address player) internal view returns (uint32 rangedXp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set rangedXp.
   */
  function setRangedXp(address player, uint32 rangedXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((rangedXp)), _fieldLayout);
  }

  /**
   * @notice Set rangedXp.
   */
  function _setRangedXp(address player, uint32 rangedXp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((rangedXp)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(address player) internal view returns (CombatSkillsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(address player) internal view returns (CombatSkillsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address player,
    uint8 attackLevel,
    uint32 attackXp,
    uint8 strengthLevel,
    uint32 strengthXp,
    uint8 defenseLevel,
    uint32 defenseXp,
    uint8 constitutionLevel,
    uint32 constitutionXp,
    uint8 rangedLevel,
    uint32 rangedXp
  ) internal {
    bytes memory _staticData = encodeStatic(
      attackLevel,
      attackXp,
      strengthLevel,
      strengthXp,
      defenseLevel,
      defenseXp,
      constitutionLevel,
      constitutionXp,
      rangedLevel,
      rangedXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address player,
    uint8 attackLevel,
    uint32 attackXp,
    uint8 strengthLevel,
    uint32 strengthXp,
    uint8 defenseLevel,
    uint32 defenseXp,
    uint8 constitutionLevel,
    uint32 constitutionXp,
    uint8 rangedLevel,
    uint32 rangedXp
  ) internal {
    bytes memory _staticData = encodeStatic(
      attackLevel,
      attackXp,
      strengthLevel,
      strengthXp,
      defenseLevel,
      defenseXp,
      constitutionLevel,
      constitutionXp,
      rangedLevel,
      rangedXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(address player, CombatSkillsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.attackLevel,
      _table.attackXp,
      _table.strengthLevel,
      _table.strengthXp,
      _table.defenseLevel,
      _table.defenseXp,
      _table.constitutionLevel,
      _table.constitutionXp,
      _table.rangedLevel,
      _table.rangedXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(address player, CombatSkillsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.attackLevel,
      _table.attackXp,
      _table.strengthLevel,
      _table.strengthXp,
      _table.defenseLevel,
      _table.defenseXp,
      _table.constitutionLevel,
      _table.constitutionXp,
      _table.rangedLevel,
      _table.rangedXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint8 attackLevel,
      uint32 attackXp,
      uint8 strengthLevel,
      uint32 strengthXp,
      uint8 defenseLevel,
      uint32 defenseXp,
      uint8 constitutionLevel,
      uint32 constitutionXp,
      uint8 rangedLevel,
      uint32 rangedXp
    )
  {
    attackLevel = (uint8(Bytes.getBytes1(_blob, 0)));

    attackXp = (uint32(Bytes.getBytes4(_blob, 1)));

    strengthLevel = (uint8(Bytes.getBytes1(_blob, 5)));

    strengthXp = (uint32(Bytes.getBytes4(_blob, 6)));

    defenseLevel = (uint8(Bytes.getBytes1(_blob, 10)));

    defenseXp = (uint32(Bytes.getBytes4(_blob, 11)));

    constitutionLevel = (uint8(Bytes.getBytes1(_blob, 15)));

    constitutionXp = (uint32(Bytes.getBytes4(_blob, 16)));

    rangedLevel = (uint8(Bytes.getBytes1(_blob, 20)));

    rangedXp = (uint32(Bytes.getBytes4(_blob, 21)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (CombatSkillsData memory _table) {
    (
      _table.attackLevel,
      _table.attackXp,
      _table.strengthLevel,
      _table.strengthXp,
      _table.defenseLevel,
      _table.defenseXp,
      _table.constitutionLevel,
      _table.constitutionXp,
      _table.rangedLevel,
      _table.rangedXp
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(address player) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(address player) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint8 attackLevel,
    uint32 attackXp,
    uint8 strengthLevel,
    uint32 strengthXp,
    uint8 defenseLevel,
    uint32 defenseXp,
    uint8 constitutionLevel,
    uint32 constitutionXp,
    uint8 rangedLevel,
    uint32 rangedXp
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        attackLevel,
        attackXp,
        strengthLevel,
        strengthXp,
        defenseLevel,
        defenseXp,
        constitutionLevel,
        constitutionXp,
        rangedLevel,
        rangedXp
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 attackLevel,
    uint32 attackXp,
    uint8 strengthLevel,
    uint32 strengthXp,
    uint8 defenseLevel,
    uint32 defenseXp,
    uint8 constitutionLevel,
    uint32 constitutionXp,
    uint8 rangedLevel,
    uint32 rangedXp
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      attackLevel,
      attackXp,
      strengthLevel,
      strengthXp,
      defenseLevel,
      defenseXp,
      constitutionLevel,
      constitutionXp,
      rangedLevel,
      rangedXp
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(address player) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(uint160(player)));

    return _keyTuple;
  }
}
