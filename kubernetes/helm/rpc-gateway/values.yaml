# RPC Gateway - Load balancer with rate limiting for public RPC access

replicaCount: 3

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: "1.25-alpine"

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9113"

podSecurityContext:
  fsGroup: 101
  runAsUser: 101
  runAsNonRoot: true

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 101

service:
  type: ClusterIP
  http:
    port: 80
  ws:
    port: 8546
  metrics:
    port: 9113

ingress:
  enabled: true
  className: alb
  annotations:
    # AWS Load Balancer Controller
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    # SSL/TLS
    alb.ingress.kubernetes.io/certificate-arn: ""  # Set per environment or use cert-manager
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # Health checks
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    # Performance
    alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=false,deregistration_delay.timeout_seconds=30
    # WAF (set per environment)
    alb.ingress.kubernetes.io/wafv2-acl-arn: ""  # Set per environment
    # Shield (set per environment)
    alb.ingress.kubernetes.io/shield-advanced-protection: "false"
  hosts:
    - host: rpc.jeju.network
      paths:
        - path: /
          pathType: Prefix
    - host: ws.jeju.network
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: rpc-jeju-network-tls
      hosts:
        - rpc.jeju.network
        - ws.jeju.network

resources:
  limits:
    cpu: 2000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - rpc-gateway
        topologyKey: kubernetes.io/hostname

# Backend RPC configuration
backend:
  # Multiple RPC nodes for load balancing
  rpcService: "reth-rpc"
  rpcPort: 8545
  wsPort: 8546
  # Health check
  healthPath: "/"
  healthInterval: 10
  healthTimeout: 5

# Rate limiting configuration
rateLimit:
  enabled: true
  # Per IP limits
  requestsPerSecond: 100
  requestsPerMinute: 5000
  burstSize: 200
  # Connection limits
  maxConnectionsPerIp: 10
  # Note: Method-specific limits are not currently implemented in nginx config
  # Consider using a more sophisticated API gateway (Kong, Tyk) for method-level rate limiting

# Logging
logging:
  level: info
  format: json
  accessLog: true

# Monitoring
monitoring:
  enabled: true
  exporterPort: 9113

