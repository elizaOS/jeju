// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { MobType } from "../common.sol";

struct MobData {
  MobType mobType;
  int32 x;
  int32 y;
  int32 z;
  uint32 health;
  uint32 maxHealth;
  uint8 attackLevel;
  uint8 strengthLevel;
  uint8 defenseLevel;
  uint8 rangedLevel;
  uint256 lastSpawnTime;
  bool isAlive;
}

library Mob {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "hyperscape", name: "Mob", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746268797065727363617065000000004d6f6200000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x003a0c0001040404040401010101200100000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, int32, int32, int32, uint32, uint32, uint8, uint8, uint8, uint8, uint256, bool)
  Schema constant _valueSchema = Schema.wrap(0x003a0c00002323230303000000001f6000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "mobId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](12);
    fieldNames[0] = "mobType";
    fieldNames[1] = "x";
    fieldNames[2] = "y";
    fieldNames[3] = "z";
    fieldNames[4] = "health";
    fieldNames[5] = "maxHealth";
    fieldNames[6] = "attackLevel";
    fieldNames[7] = "strengthLevel";
    fieldNames[8] = "defenseLevel";
    fieldNames[9] = "rangedLevel";
    fieldNames[10] = "lastSpawnTime";
    fieldNames[11] = "isAlive";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get mobType.
   */
  function getMobType(bytes32 mobId) internal view returns (MobType mobType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return MobType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get mobType.
   */
  function _getMobType(bytes32 mobId) internal view returns (MobType mobType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return MobType(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set mobType.
   */
  function setMobType(bytes32 mobId, MobType mobType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(mobType)), _fieldLayout);
  }

  /**
   * @notice Set mobType.
   */
  function _setMobType(bytes32 mobId, MobType mobType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(mobType)), _fieldLayout);
  }

  /**
   * @notice Get x.
   */
  function getX(bytes32 mobId) internal view returns (int32 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get x.
   */
  function _getX(bytes32 mobId) internal view returns (int32 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set x.
   */
  function setX(bytes32 mobId, int32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((x)), _fieldLayout);
  }

  /**
   * @notice Set x.
   */
  function _setX(bytes32 mobId, int32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((x)), _fieldLayout);
  }

  /**
   * @notice Get y.
   */
  function getY(bytes32 mobId) internal view returns (int32 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get y.
   */
  function _getY(bytes32 mobId) internal view returns (int32 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set y.
   */
  function setY(bytes32 mobId, int32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((y)), _fieldLayout);
  }

  /**
   * @notice Set y.
   */
  function _setY(bytes32 mobId, int32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((y)), _fieldLayout);
  }

  /**
   * @notice Get z.
   */
  function getZ(bytes32 mobId) internal view returns (int32 z) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get z.
   */
  function _getZ(bytes32 mobId) internal view returns (int32 z) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set z.
   */
  function setZ(bytes32 mobId, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((z)), _fieldLayout);
  }

  /**
   * @notice Set z.
   */
  function _setZ(bytes32 mobId, int32 z) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((z)), _fieldLayout);
  }

  /**
   * @notice Get health.
   */
  function getHealth(bytes32 mobId) internal view returns (uint32 health) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get health.
   */
  function _getHealth(bytes32 mobId) internal view returns (uint32 health) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set health.
   */
  function setHealth(bytes32 mobId, uint32 health) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((health)), _fieldLayout);
  }

  /**
   * @notice Set health.
   */
  function _setHealth(bytes32 mobId, uint32 health) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((health)), _fieldLayout);
  }

  /**
   * @notice Get maxHealth.
   */
  function getMaxHealth(bytes32 mobId) internal view returns (uint32 maxHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get maxHealth.
   */
  function _getMaxHealth(bytes32 mobId) internal view returns (uint32 maxHealth) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set maxHealth.
   */
  function setMaxHealth(bytes32 mobId, uint32 maxHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((maxHealth)), _fieldLayout);
  }

  /**
   * @notice Set maxHealth.
   */
  function _setMaxHealth(bytes32 mobId, uint32 maxHealth) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((maxHealth)), _fieldLayout);
  }

  /**
   * @notice Get attackLevel.
   */
  function getAttackLevel(bytes32 mobId) internal view returns (uint8 attackLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get attackLevel.
   */
  function _getAttackLevel(bytes32 mobId) internal view returns (uint8 attackLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set attackLevel.
   */
  function setAttackLevel(bytes32 mobId, uint8 attackLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((attackLevel)), _fieldLayout);
  }

  /**
   * @notice Set attackLevel.
   */
  function _setAttackLevel(bytes32 mobId, uint8 attackLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((attackLevel)), _fieldLayout);
  }

  /**
   * @notice Get strengthLevel.
   */
  function getStrengthLevel(bytes32 mobId) internal view returns (uint8 strengthLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get strengthLevel.
   */
  function _getStrengthLevel(bytes32 mobId) internal view returns (uint8 strengthLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set strengthLevel.
   */
  function setStrengthLevel(bytes32 mobId, uint8 strengthLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((strengthLevel)), _fieldLayout);
  }

  /**
   * @notice Set strengthLevel.
   */
  function _setStrengthLevel(bytes32 mobId, uint8 strengthLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((strengthLevel)), _fieldLayout);
  }

  /**
   * @notice Get defenseLevel.
   */
  function getDefenseLevel(bytes32 mobId) internal view returns (uint8 defenseLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get defenseLevel.
   */
  function _getDefenseLevel(bytes32 mobId) internal view returns (uint8 defenseLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set defenseLevel.
   */
  function setDefenseLevel(bytes32 mobId, uint8 defenseLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((defenseLevel)), _fieldLayout);
  }

  /**
   * @notice Set defenseLevel.
   */
  function _setDefenseLevel(bytes32 mobId, uint8 defenseLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((defenseLevel)), _fieldLayout);
  }

  /**
   * @notice Get rangedLevel.
   */
  function getRangedLevel(bytes32 mobId) internal view returns (uint8 rangedLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get rangedLevel.
   */
  function _getRangedLevel(bytes32 mobId) internal view returns (uint8 rangedLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set rangedLevel.
   */
  function setRangedLevel(bytes32 mobId, uint8 rangedLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((rangedLevel)), _fieldLayout);
  }

  /**
   * @notice Set rangedLevel.
   */
  function _setRangedLevel(bytes32 mobId, uint8 rangedLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((rangedLevel)), _fieldLayout);
  }

  /**
   * @notice Get lastSpawnTime.
   */
  function getLastSpawnTime(bytes32 mobId) internal view returns (uint256 lastSpawnTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastSpawnTime.
   */
  function _getLastSpawnTime(bytes32 mobId) internal view returns (uint256 lastSpawnTime) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 10, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastSpawnTime.
   */
  function setLastSpawnTime(bytes32 mobId, uint256 lastSpawnTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((lastSpawnTime)), _fieldLayout);
  }

  /**
   * @notice Set lastSpawnTime.
   */
  function _setLastSpawnTime(bytes32 mobId, uint256 lastSpawnTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 10, abi.encodePacked((lastSpawnTime)), _fieldLayout);
  }

  /**
   * @notice Get isAlive.
   */
  function getIsAlive(bytes32 mobId) internal view returns (bool isAlive) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isAlive.
   */
  function _getIsAlive(bytes32 mobId) internal view returns (bool isAlive) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 11, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isAlive.
   */
  function setIsAlive(bytes32 mobId, bool isAlive) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((isAlive)), _fieldLayout);
  }

  /**
   * @notice Set isAlive.
   */
  function _setIsAlive(bytes32 mobId, bool isAlive) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setStaticField(_tableId, _keyTuple, 11, abi.encodePacked((isAlive)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 mobId) internal view returns (MobData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 mobId) internal view returns (MobData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 mobId,
    MobType mobType,
    int32 x,
    int32 y,
    int32 z,
    uint32 health,
    uint32 maxHealth,
    uint8 attackLevel,
    uint8 strengthLevel,
    uint8 defenseLevel,
    uint8 rangedLevel,
    uint256 lastSpawnTime,
    bool isAlive
  ) internal {
    bytes memory _staticData = encodeStatic(
      mobType,
      x,
      y,
      z,
      health,
      maxHealth,
      attackLevel,
      strengthLevel,
      defenseLevel,
      rangedLevel,
      lastSpawnTime,
      isAlive
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 mobId,
    MobType mobType,
    int32 x,
    int32 y,
    int32 z,
    uint32 health,
    uint32 maxHealth,
    uint8 attackLevel,
    uint8 strengthLevel,
    uint8 defenseLevel,
    uint8 rangedLevel,
    uint256 lastSpawnTime,
    bool isAlive
  ) internal {
    bytes memory _staticData = encodeStatic(
      mobType,
      x,
      y,
      z,
      health,
      maxHealth,
      attackLevel,
      strengthLevel,
      defenseLevel,
      rangedLevel,
      lastSpawnTime,
      isAlive
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 mobId, MobData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.mobType,
      _table.x,
      _table.y,
      _table.z,
      _table.health,
      _table.maxHealth,
      _table.attackLevel,
      _table.strengthLevel,
      _table.defenseLevel,
      _table.rangedLevel,
      _table.lastSpawnTime,
      _table.isAlive
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 mobId, MobData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.mobType,
      _table.x,
      _table.y,
      _table.z,
      _table.health,
      _table.maxHealth,
      _table.attackLevel,
      _table.strengthLevel,
      _table.defenseLevel,
      _table.rangedLevel,
      _table.lastSpawnTime,
      _table.isAlive
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      MobType mobType,
      int32 x,
      int32 y,
      int32 z,
      uint32 health,
      uint32 maxHealth,
      uint8 attackLevel,
      uint8 strengthLevel,
      uint8 defenseLevel,
      uint8 rangedLevel,
      uint256 lastSpawnTime,
      bool isAlive
    )
  {
    mobType = MobType(uint8(Bytes.getBytes1(_blob, 0)));

    x = (int32(uint32(Bytes.getBytes4(_blob, 1))));

    y = (int32(uint32(Bytes.getBytes4(_blob, 5))));

    z = (int32(uint32(Bytes.getBytes4(_blob, 9))));

    health = (uint32(Bytes.getBytes4(_blob, 13)));

    maxHealth = (uint32(Bytes.getBytes4(_blob, 17)));

    attackLevel = (uint8(Bytes.getBytes1(_blob, 21)));

    strengthLevel = (uint8(Bytes.getBytes1(_blob, 22)));

    defenseLevel = (uint8(Bytes.getBytes1(_blob, 23)));

    rangedLevel = (uint8(Bytes.getBytes1(_blob, 24)));

    lastSpawnTime = (uint256(Bytes.getBytes32(_blob, 25)));

    isAlive = (_toBool(uint8(Bytes.getBytes1(_blob, 57))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (MobData memory _table) {
    (
      _table.mobType,
      _table.x,
      _table.y,
      _table.z,
      _table.health,
      _table.maxHealth,
      _table.attackLevel,
      _table.strengthLevel,
      _table.defenseLevel,
      _table.rangedLevel,
      _table.lastSpawnTime,
      _table.isAlive
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 mobId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 mobId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    MobType mobType,
    int32 x,
    int32 y,
    int32 z,
    uint32 health,
    uint32 maxHealth,
    uint8 attackLevel,
    uint8 strengthLevel,
    uint8 defenseLevel,
    uint8 rangedLevel,
    uint256 lastSpawnTime,
    bool isAlive
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        mobType,
        x,
        y,
        z,
        health,
        maxHealth,
        attackLevel,
        strengthLevel,
        defenseLevel,
        rangedLevel,
        lastSpawnTime,
        isAlive
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    MobType mobType,
    int32 x,
    int32 y,
    int32 z,
    uint32 health,
    uint32 maxHealth,
    uint8 attackLevel,
    uint8 strengthLevel,
    uint8 defenseLevel,
    uint8 rangedLevel,
    uint256 lastSpawnTime,
    bool isAlive
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      mobType,
      x,
      y,
      z,
      health,
      maxHealth,
      attackLevel,
      strengthLevel,
      defenseLevel,
      rangedLevel,
      lastSpawnTime,
      isAlive
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 mobId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = mobId;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
