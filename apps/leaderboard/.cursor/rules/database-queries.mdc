---
description: Guidelines for working with database queries using Drizzle ORM
globs: src/lib/data/*.ts,src/app/*/*.ts
alwaysApply: false
---

# Database Query Guidelines

- **Drizzle ORM Setup**
  - Database connection is configured in `src/lib/data/db.ts`
  - Schema definitions are in `src/lib/data/schema.ts`
  - Use the `db` object for all database interactions: `import { db } from "@/lib/data/db"`
  - Prefer the relational query builder syntax for complex queries with relationships

  ```typescript
  // ✅ DO: Use relational query builder for related data
  const result = await db.query.users.findMany({
    with: {
      tagScores: {
        with: {
          tag: true
        }
      }
    }
  });

  // ❌ DON'T: Use manual joins or multiple queries when relations exist
  const users = await db.select().from(users);
  const tagScores = await db.select().from(userTagScores).where(eq(userTagScores.username, username));
  ```
Read up on drizzle docs on best practices for querying / schema management etc: https://orm.drizzle.team/llms.txt

- **Type Inference Best Practices**
  - **Single Source of Truth**: Database schema is the source of truth for data types
  - Always derive types from schema objects using Drizzle's inference helpers
  - Avoid creating duplicate TypeScript interfaces that mirror table structures

  ```typescript
  // ✅ DO: Use type inference from schema
  import { users, userTagScores } from "@/lib/data/schema";
  import { InferSelectModel } from "drizzle-orm";
  
  // Use the inferred type from the schema
  type User = InferSelectModel<typeof users>;
  
  // ❌ DON'T: Create redundant types that mirror the schema
  // Don't do this:
  interface User {
    username: string;
    avatarUrl: string;
    isBot: number;
    lastUpdated: string;
  }
  ```

- **Function Return Types**
  - Use specific return types for query functions
  - Leverage type inference where possible for consistency
  - Document return types to enhance code readability

  ```typescript
  // ✅ DO: Define clear return types for query functions
  async function getTopUsers(limit: number): Promise<Array<InferSelectModel<typeof users>>> {
    return db.query.users.findMany({
      limit,
      orderBy: [desc(users.score)]
    });
  }
  
  // For complex return structures, define an explicit type
  type UserWithTags = InferSelectModel<typeof users> & {
    tagScores: Array<InferSelectModel<typeof userTagScores> & {
      tag: InferSelectModel<typeof tags>
    }>
  };
  ```

- **Migration Workflow**
  - Use the following commands for database schema changes:

  ```bash
  # Generate migration files after schema changes
  bun run db:generate
  
  # Apply migrations to the database
  bun run db:migrate
  
  # Explore the database with UI
  bun run db:studio
  ```

  - Always update `schema.ts` first, then generate migrations
  - Version control both schema and migrations
  - Test migrations thoroughly before deployment

- **Query Optimization**
  - Use indexes for frequently queried columns (defined in schema.ts)
  - Filter data at the database level instead of in application code
  - Use pagination (limit/offset) for large result sets
  - Select only needed columns for queries requiring large datasets

  ```typescript
  // ✅ DO: Filter in the database
  const recentUsers = await db.query.users.findMany({
    where: gte(users.lastUpdated, startDate),
    limit: 10
  });
  
  // ❌ DON'T: Retrieve everything and filter in code
  const allUsers = await db.query.users.findMany();
  const recentUsers = allUsers.filter(user => new Date(user.lastUpdated) >= startDate).slice(0, 10);
  ```

- **Date Handling**
  - Store dates as ISO strings in the database
  - Use consistent date handling with helpers from `@/lib/date-utils`
  - Apply date filters at the database level when possible

  ```typescript
  // ✅ DO: Use date utilities for consistency
  import { toDateString } from "@/lib/date-utils";
  import { UTCDate } from "@date-fns/utc";
  
  const today = new UTCDate();
  const dateString = toDateString(today);
  
  // Query with date filters
  const result = await db.query.userDailyScores.findMany({
    where: eq(userDailyScores.date, dateString)
  });
  ```

- **Error Handling**
  - Implement proper error handling for database operations
  - Log database errors with appropriate context
  - Provide meaningful error messages to calling code

  ```typescript
  // ✅ DO: Handle database errors properly
  try {
    const result = await db.query.users.findMany();
    return result;
  } catch (error) {
    console.error("Database query failed:", error);
    throw new Error("Failed to fetch users");
  }
  ``` 