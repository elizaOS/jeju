// SPDX-License-Identifier: MIT
pragma solidity ^0.8.26;

import {Script, console2} from "forge-std/Script.sol";
import {CloudServiceRegistry} from "../src/cloud/CloudServiceRegistry.sol";
import {CloudPaymaster} from "../src/paymaster/CloudPaymaster.sol";
import {CreditPurchaseContract} from "../src/cloud/CreditPurchaseContract.sol";
import {IEntryPoint} from "account-abstraction/interfaces/IEntryPoint.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";

/**
 * @title DeployCloudIntegration
 * @notice Foundry deployment script for cloud integration contracts
 * @dev Deploy with: forge script script/DeployCloudIntegration.s.sol:DeployCloudIntegration --rpc-url $RPC_URL --broadcast
 *
 * Required Environment Variables:
 * - DEPLOYER_PRIVATE_KEY: Private key for deployment
 * - TREASURY_ADDRESS: Address to receive payments
 * - ELIZAOS_TOKEN_ADDRESS: Address of elizaOS token
 * - ENTRYPOINT_ADDRESS: ERC-4337 EntryPoint address
 * - LIQUIDITY_VAULT_ADDRESS: LiquidityVault address
 * - FEE_DISTRIBUTOR_ADDRESS: FeeDistributor address
 * - PRICE_ORACLE_ADDRESS: PriceOracle address
 */
contract DeployCloudIntegration is Script {
    // Environment variables
    address public treasury;
    address public elizaOSToken;
    address public entryPoint;
    address public liquidityVault;
    address public feeDistributor;
    address public priceOracle;

    // Deployed contracts
    CloudServiceRegistry public serviceRegistry;
    CloudPaymaster public cloudPaymaster;
    CreditPurchaseContract public creditPurchase;

    function setUp() public {
        // Load environment variables
        treasury = vm.envAddress("TREASURY_ADDRESS");
        elizaOSToken = vm.envAddress("ELIZAOS_TOKEN_ADDRESS");
        entryPoint = vm.envAddress("ENTRYPOINT_ADDRESS");
        liquidityVault = vm.envAddress("LIQUIDITY_VAULT_ADDRESS");
        feeDistributor = vm.envAddress("FEE_DISTRIBUTOR_ADDRESS");
        priceOracle = vm.envAddress("PRICE_ORACLE_ADDRESS");

        // Validate addresses
        require(treasury != address(0), "TREASURY_ADDRESS not set");
        require(elizaOSToken != address(0), "ELIZAOS_TOKEN_ADDRESS not set");
        require(entryPoint != address(0), "ENTRYPOINT_ADDRESS not set");
        require(liquidityVault != address(0), "LIQUIDITY_VAULT_ADDRESS not set");
        require(feeDistributor != address(0), "FEE_DISTRIBUTOR_ADDRESS not set");
        require(priceOracle != address(0), "PRICE_ORACLE_ADDRESS not set");
    }

    function run() public {
        uint256 deployerPrivateKey = vm.envUint("DEPLOYER_PRIVATE_KEY");
        address deployer = vm.addr(deployerPrivateKey);

        console2.log("========================================");
        console2.log("Cloud Integration Deployment");
        console2.log("========================================");
        console2.log("Deployer:", deployer);
        console2.log("Treasury:", treasury);
        console2.log("elizaOS Token:", elizaOSToken);
        console2.log("========================================\n");

        vm.startBroadcast(deployerPrivateKey);

        // 1. Deploy CloudServiceRegistry
        console2.log("Deploying CloudServiceRegistry...");
        serviceRegistry = new CloudServiceRegistry(treasury);
        console2.log("CloudServiceRegistry deployed at:", address(serviceRegistry));

        // 2. Deploy CloudPaymaster
        console2.log("\nDeploying CloudPaymaster...");
        cloudPaymaster = new CloudPaymaster(
            IEntryPoint(entryPoint),
            IERC20(elizaOSToken),
            CloudPaymaster.ILiquidityVault(liquidityVault),
            CloudPaymaster.IFeeDistributor(feeDistributor),
            CloudPaymaster.IPriceOracle(priceOracle),
            CloudPaymaster.ICloudServiceRegistry(address(serviceRegistry))
        );
        console2.log("CloudPaymaster deployed at:", address(cloudPaymaster));

        // 3. Deploy CreditPurchaseContract
        console2.log("\nDeploying CreditPurchaseContract...");
        creditPurchase = new CreditPurchaseContract(
            CreditPurchaseContract.IElizaOSToken(elizaOSToken),
            CreditPurchaseContract.IPriceOracle(priceOracle),
            treasury
        );
        console2.log("CreditPurchaseContract deployed at:", address(creditPurchase));

        // 4. Configure contracts
        console2.log("\n========================================");
        console2.log("Configuring Contracts");
        console2.log("========================================");

        // Authorize CloudPaymaster to record usage in ServiceRegistry
        console2.log("Authorizing CloudPaymaster in ServiceRegistry...");
        serviceRegistry.setAuthorizedCaller(address(cloudPaymaster), true);

        // Enable default services in ServiceRegistry
        console2.log("Enabling cloud services...");
        serviceRegistry.setServiceEnabled("chat-completion", true);
        serviceRegistry.setServiceEnabled("image-generation", true);
        serviceRegistry.setServiceEnabled("video-generation", true);
        serviceRegistry.setServiceEnabled("container", true);

        // Enable payment tokens in CreditPurchaseContract
        console2.log("Enabling payment tokens...");
        // ETH is enabled by default

        // If USDC/USDT addresses are provided, enable them
        address usdc = vm.envOr("USDC_ADDRESS", address(0));
        if (usdc != address(0)) {
            console2.log("Enabling USDC:", usdc);
            creditPurchase.setTokenSupport(usdc, true, 6);
        }

        address usdt = vm.envOr("USDT_ADDRESS", address(0));
        if (usdt != address(0)) {
            console2.log("Enabling USDT:", usdt);
            creditPurchase.setTokenSupport(usdt, true, 6);
        }

        address dai = vm.envOr("DAI_ADDRESS", address(0));
        if (dai != address(0)) {
            console2.log("Enabling DAI:", dai);
            creditPurchase.setTokenSupport(dai, true, 18);
        }

        vm.stopBroadcast();

        // 5. Print deployment summary
        console2.log("\n========================================");
        console2.log("Deployment Summary");
        console2.log("========================================");
        console2.log("CloudServiceRegistry:", address(serviceRegistry));
        console2.log("CloudPaymaster:", address(cloudPaymaster));
        console2.log("CreditPurchaseContract:", address(creditPurchase));
        console2.log("========================================");

        // 6. Save deployment addresses
        string memory chainName = getChainName();
        string memory outputPath = string.concat("deployments/cloud-integration-", chainName, ".json");

        string memory json = string.concat(
            '{\n',
            '  "cloudServiceRegistry": "', vm.toString(address(serviceRegistry)), '",\n',
            '  "cloudPaymaster": "', vm.toString(address(cloudPaymaster)), '",\n',
            '  "creditPurchaseContract": "', vm.toString(address(creditPurchase)), '",\n',
            '  "deployer": "', vm.toString(deployer), '",\n',
            '  "timestamp": "', vm.toString(block.timestamp), '",\n',
            '  "blockNumber": "', vm.toString(block.number), '"\n',
            '}'
        );

        vm.writeFile(outputPath, json);
        console2.log("\nDeployment info saved to:", outputPath);

        // 7. Verification commands
        console2.log("\n========================================");
        console2.log("Verify Contracts:");
        console2.log("========================================");
        console2.log("forge verify-contract", vm.toString(address(serviceRegistry)), "src/cloud/CloudServiceRegistry.sol:CloudServiceRegistry");
        console2.log("forge verify-contract", vm.toString(address(cloudPaymaster)), "src/paymaster/CloudPaymaster.sol:CloudPaymaster");
        console2.log("forge verify-contract", vm.toString(address(creditPurchase)), "src/cloud/CreditPurchaseContract.sol:CreditPurchaseContract");
    }

    function getChainName() internal view returns (string memory) {
        uint256 chainId = block.chainid;

        if (chainId == 1) return "mainnet";
        if (chainId == 11155111) return "sepolia";
        if (chainId == 8453) return "base";
        if (chainId == 84532) return "base-sepolia";
        if (chainId == 420691) return "jeju-mainnet";
        if (chainId == 420692) return "jeju-testnet";
        if (chainId == 31337 || chainId == 1337) return "localnet";

        return vm.toString(chainId);
    }
}

/**
 * Usage Examples:
 *
 * 1. Deploy to local network:
 * forge script script/DeployCloudIntegration.s.sol:DeployCloudIntegration \
 *   --rpc-url http://localhost:8545 \
 *   --broadcast \
 *   --private-key $DEPLOYER_PRIVATE_KEY
 *
 * 2. Deploy to Jeju mainnet:
 * forge script script/DeployCloudIntegration.s.sol:DeployCloudIntegration \
 *   --rpc-url $JEJU_RPC_URL \
 *   --broadcast \
 *   --verify \
 *   --etherscan-api-key $JEJUSCAN_API_KEY
 *
 * 3. Dry run (simulation):
 * forge script script/DeployCloudIntegration.s.sol:DeployCloudIntegration \
 *   --rpc-url $RPC_URL
 *
 * Required .env file:
 * DEPLOYER_PRIVATE_KEY=0x...
 * TREASURY_ADDRESS=0x...
 * ELIZAOS_TOKEN_ADDRESS=0x...
 * ENTRYPOINT_ADDRESS=0x...
 * LIQUIDITY_VAULT_ADDRESS=0x...
 * FEE_DISTRIBUTOR_ADDRESS=0x...
 * PRICE_ORACLE_ADDRESS=0x...
 * USDC_ADDRESS=0x... (optional)
 * USDT_ADDRESS=0x... (optional)
 * DAI_ADDRESS=0x... (optional)
 */