# Comprehensive Jeju Chain Schema
# Auto-generates TypeScript entities and GraphQL API

type Block @entity {
  id: ID!
  number: Int! @index
  hash: String! @unique
  parentHash: String!
  timestamp: DateTime! @index
  miner: String! @index
  gasUsed: BigInt!
  gasLimit: BigInt!
  baseFeePerGas: BigInt
  difficulty: BigInt
  size: Int
  transactions: [Transaction!]! @derivedFrom(field: "block")
  logs: [Log!]! @derivedFrom(field: "block")
  transactionCount: Int!
}

type Transaction @entity {
  id: ID!
  hash: String! @unique @index
  block: Block!
  transactionIndex: Int!
  from: Account! @index
  to: Account @index
  value: BigInt!
  gasPrice: BigInt
  gasLimit: BigInt!
  gasUsed: BigInt
  input: String
  nonce: Int!
  status: TransactionStatus! @index
  contractAddress: Contract
  type: Int
  maxFeePerGas: BigInt
  maxPriorityFeePerGas: BigInt
  logs: [Log!]! @derivedFrom(field: "transaction")
  traces: [Trace!]! @derivedFrom(field: "transaction")
  tokenTransfers: [TokenTransfer!]! @derivedFrom(field: "transaction")
}

enum TransactionStatus {
  SUCCESS
  FAILED
}

type Log @entity {
  id: ID!
  block: Block!
  transaction: Transaction!
  logIndex: Int!
  address: Contract! @index
  topic0: String @index
  topic1: String @index
  topic2: String @index
  topic3: String @index
  data: String
  decodedEvent: DecodedEvent
}

type DecodedEvent @entity {
  id: ID!
  log: Log! @unique
  block: Block!
  transaction: Transaction!
  address: Contract! @index
  eventSignature: String! @index
  eventName: String! @index
  args: JSON!
  timestamp: DateTime! @index
}

type Contract @entity {
  id: ID!
  address: String! @unique @index
  creator: Account
  creationTransaction: Transaction
  creationBlock: Block
  bytecode: String
  contractType: ContractType
  isERC20: Boolean!
  isERC721: Boolean!
  isERC1155: Boolean!
  isProxy: Boolean!
  implementationAddress: String
  verified: Boolean!
  firstSeenAt: DateTime! @index
  lastSeenAt: DateTime! @index
  logs: [Log!]! @derivedFrom(field: "address")
  decodedEvents: [DecodedEvent!]! @derivedFrom(field: "address")
}

enum ContractType {
  ERC20
  ERC721
  ERC1155
  UNISWAP_V4_POOL
  COMPOUND_V3_COMET
  SYNTHETIX_V3_CORE
  PROXY_EIP1967
  MULTISIG
  UNKNOWN
}

type Trace @entity {
  id: ID!
  transaction: Transaction!
  traceAddress: [Int!]!
  subtraces: Int!
  traceType: TraceType! @index
  callType: String
  from: Account @index
  to: Account @index
  value: BigInt
  gas: BigInt
  gasUsed: BigInt
  input: String
  output: String
  error: String
  block: Block!
}

enum TraceType {
  CALL
  CREATE
  SUICIDE
  REWARD
}

type Account @entity {
  id: ID!
  address: String! @unique @index
  isContract: Boolean! @index
  contract: Contract
  firstSeenBlock: Int! @index
  lastSeenBlock: Int! @index
  transactionCount: Int!
  totalValueSent: BigInt!
  totalValueReceived: BigInt!
  labels: [String!]!
  transactionsFrom: [Transaction!]! @derivedFrom(field: "from")
  transactionsTo: [Transaction!]! @derivedFrom(field: "to")
  tokenBalances: [TokenBalance!]! @derivedFrom(field: "account")
  nftOwnerships: [NFTOwnership!]! @derivedFrom(field: "owner")
}

type TokenTransfer @entity {
  id: ID!
  block: Block!
  transaction: Transaction!
  logIndex: Int!
  token: Contract! @index
  tokenStandard: TokenStandard! @index
  from: Account @index
  to: Account @index
  value: BigInt
  tokenId: BigInt
  operator: Account
  timestamp: DateTime! @index
}

enum TokenStandard {
  ERC20
  ERC721
  ERC1155
}

type TokenBalance @entity {
  id: ID!
  token: Contract! @index
  account: Account! @index
  balance: BigInt!
  transferCount: Int!
  lastUpdated: DateTime! @index
}

type NFTOwnership @entity {
  id: ID!
  token: Contract! @index
  tokenId: BigInt! @index
  owner: Account! @index
  acquiredAtBlock: Int!
  acquiredAt: DateTime!
}

type Relationship @entity {
  id: ID!
  fromEntityType: EntityType! @index
  fromEntityId: String! @index
  toEntityType: EntityType! @index
  toEntityId: String! @index
  relationshipType: String! @index
  transaction: Transaction
  block: Block!
  weight: Int!
  metadata: JSON
  firstSeenAt: DateTime!
  lastSeenAt: DateTime!
}

enum EntityType {
  ADDRESS
  CONTRACT
  TOKEN
  BLOCK
  TRANSACTION
}

type DailyActivity @entity {
  id: ID!
  date: DateTime! @unique @index
  transactionCount: Int!
  uniqueSenders: Int!
  uniqueReceivers: Int!
  contractDeployments: Int!
  totalValueTransferred: BigInt!
  totalGasSpent: BigInt!
  avgGasUsed: Float!
  blockCount: Int!
}

type ContractInteraction @entity {
  id: ID!
  contract: Contract! @index
  caller: Account! @index
  interactionCount: Int!
  totalValueSent: BigInt!
  firstInteraction: DateTime!
  lastInteraction: DateTime!
  activeDays: Int!
}

type ProtocolActivity @entity {
  id: ID!
  protocol: Contract! @index
  eventName: String! @index
  date: DateTime! @index
  eventCount: Int!
  uniqueTransactions: Int!
  activeHours: Int!
}

